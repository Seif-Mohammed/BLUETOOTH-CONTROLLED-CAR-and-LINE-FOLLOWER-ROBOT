
Metal_Detector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003616  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  00003616  000036aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008000e4  008000e4  0000372e  2**0
                  ALLOC
  3 .stab         0000315c  00000000  00000000  00003730  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000148f  00000000  00000000  0000688c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000800a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a04f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c0d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c254  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c516  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cda4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__vector_10>
      2c:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3e       	cpi	r26, 0xE4	; 228
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ee       	ldi	r26, 0xE4	; 228
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3f       	cpi	r26, 0xF6	; 246
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <main>
      8a:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ed       	ldi	r26, 0xDC	; 220
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ee 1a 	jmp	0x35dc	; 0x35dc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ed       	ldi	r24, 0xDC	; 220
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ee 1a 	jmp	0x35dc	; 0x35dc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c ed       	ldi	r22, 0xDC	; 220
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <HLCD_U8Init>:
#include "HLCD_Interface.h"
#include "HLCD_Private.h"
#include "HLCD_Config.h"
#include <avr/delay.h>
#include <stdio.h>
u8 HLCD_U8Init(void){
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	cd 54       	subi	r28, 0x4D	; 77
     cac:	d0 40       	sbci	r29, 0x00	; 0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cb8:	fe 01       	movw	r30, r28
     cba:	e3 5b       	subi	r30, 0xB3	; 179
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 83       	st	Z, r24
     cc2:	fe 01       	movw	r30, r28
     cc4:	e7 5b       	subi	r30, 0xB7	; 183
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a8 ef       	ldi	r26, 0xF8	; 248
     cce:	b1 e4       	ldi	r27, 0x41	; 65
     cd0:	80 83       	st	Z, r24
     cd2:	91 83       	std	Z+1, r25	; 0x01
     cd4:	a2 83       	std	Z+2, r26	; 0x02
     cd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd8:	8e 01       	movw	r16, r28
     cda:	0b 5b       	subi	r16, 0xBB	; 187
     cdc:	1f 4f       	sbci	r17, 0xFF	; 255
     cde:	fe 01       	movw	r30, r28
     ce0:	e7 5b       	subi	r30, 0xB7	; 183
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	60 81       	ld	r22, Z
     ce6:	71 81       	ldd	r23, Z+1	; 0x01
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	4a ef       	ldi	r20, 0xFA	; 250
     cf2:	54 e4       	ldi	r21, 0x44	; 68
     cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 83       	st	Z, r24
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	a2 83       	std	Z+2, r26	; 0x02
     d04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d06:	fe 01       	movw	r30, r28
     d08:	eb 5b       	subi	r30, 0xBB	; 187
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e8       	ldi	r20, 0x80	; 128
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d20:	88 23       	and	r24, r24
     d22:	44 f4       	brge	.+16     	; 0xd34 <HLCD_U8Init+0x96>
		__ticks = 1;
     d24:	fe 01       	movw	r30, r28
     d26:	ed 5b       	subi	r30, 0xBD	; 189
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	80 83       	st	Z, r24
     d32:	64 c0       	rjmp	.+200    	; 0xdfc <HLCD_U8Init+0x15e>
	else if (__tmp > 65535)
     d34:	fe 01       	movw	r30, r28
     d36:	eb 5b       	subi	r30, 0xBB	; 187
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	60 81       	ld	r22, Z
     d3c:	71 81       	ldd	r23, Z+1	; 0x01
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	3f ef       	ldi	r19, 0xFF	; 255
     d46:	4f e7       	ldi	r20, 0x7F	; 127
     d48:	57 e4       	ldi	r21, 0x47	; 71
     d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d4e:	18 16       	cp	r1, r24
     d50:	0c f0       	brlt	.+2      	; 0xd54 <HLCD_U8Init+0xb6>
     d52:	43 c0       	rjmp	.+134    	; 0xdda <HLCD_U8Init+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d54:	fe 01       	movw	r30, r28
     d56:	e7 5b       	subi	r30, 0xB7	; 183
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	60 81       	ld	r22, Z
     d5c:	71 81       	ldd	r23, Z+1	; 0x01
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	93 81       	ldd	r25, Z+3	; 0x03
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e2       	ldi	r20, 0x20	; 32
     d68:	51 e4       	ldi	r21, 0x41	; 65
     d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	8e 01       	movw	r16, r28
     d74:	0d 5b       	subi	r16, 0xBD	; 189
     d76:	1f 4f       	sbci	r17, 0xFF	; 255
     d78:	bc 01       	movw	r22, r24
     d7a:	cd 01       	movw	r24, r26
     d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	f8 01       	movw	r30, r16
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24
     d8a:	1f c0       	rjmp	.+62     	; 0xdca <HLCD_U8Init+0x12c>
     d8c:	fe 01       	movw	r30, r28
     d8e:	ef 5b       	subi	r30, 0xBF	; 191
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	88 ec       	ldi	r24, 0xC8	; 200
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d9a:	fe 01       	movw	r30, r28
     d9c:	ef 5b       	subi	r30, 0xBF	; 191
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	80 81       	ld	r24, Z
     da2:	91 81       	ldd	r25, Z+1	; 0x01
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <HLCD_U8Init+0x106>
     da8:	fe 01       	movw	r30, r28
     daa:	ef 5b       	subi	r30, 0xBF	; 191
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	91 83       	std	Z+1, r25	; 0x01
     db0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db2:	de 01       	movw	r26, r28
     db4:	ad 5b       	subi	r26, 0xBD	; 189
     db6:	bf 4f       	sbci	r27, 0xFF	; 255
     db8:	fe 01       	movw	r30, r28
     dba:	ed 5b       	subi	r30, 0xBD	; 189
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	11 96       	adiw	r26, 0x01	; 1
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dca:	fe 01       	movw	r30, r28
     dcc:	ed 5b       	subi	r30, 0xBD	; 189
     dce:	ff 4f       	sbci	r31, 0xFF	; 255
     dd0:	80 81       	ld	r24, Z
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	d1 f6       	brne	.-76     	; 0xd8c <HLCD_U8Init+0xee>
     dd8:	24 c0       	rjmp	.+72     	; 0xe22 <HLCD_U8Init+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dda:	8e 01       	movw	r16, r28
     ddc:	0d 5b       	subi	r16, 0xBD	; 189
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	fe 01       	movw	r30, r28
     de2:	eb 5b       	subi	r30, 0xBB	; 187
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	93 81       	ldd	r25, Z+3	; 0x03
     dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	f8 01       	movw	r30, r16
     df8:	91 83       	std	Z+1, r25	; 0x01
     dfa:	80 83       	st	Z, r24
     dfc:	fe 01       	movw	r30, r28
     dfe:	ed 5b       	subi	r30, 0xBD	; 189
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	fe 01       	movw	r30, r28
     e08:	ff 96       	adiw	r30, 0x3f	; 63
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
     e0e:	fe 01       	movw	r30, r28
     e10:	ff 96       	adiw	r30, 0x3f	; 63
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <HLCD_U8Init+0x178>
     e1a:	fe 01       	movw	r30, r28
     e1c:	ff 96       	adiw	r30, 0x3f	; 63
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
	_delay_ms(31);
	/*send function set command*/
	HLCD_U8WriteCommand(0b00111000);
     e22:	88 e3       	ldi	r24, 0x38	; 56
     e24:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a0 e2       	ldi	r26, 0x20	; 32
     e2e:	b2 e4       	ldi	r27, 0x42	; 66
     e30:	8b af       	std	Y+59, r24	; 0x3b
     e32:	9c af       	std	Y+60, r25	; 0x3c
     e34:	ad af       	std	Y+61, r26	; 0x3d
     e36:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e38:	6b ad       	ldd	r22, Y+59	; 0x3b
     e3a:	7c ad       	ldd	r23, Y+60	; 0x3c
     e3c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e3e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e40:	2b ea       	ldi	r18, 0xAB	; 171
     e42:	3a ea       	ldi	r19, 0xAA	; 170
     e44:	4a e2       	ldi	r20, 0x2A	; 42
     e46:	50 e4       	ldi	r21, 0x40	; 64
     e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	8f ab       	std	Y+55, r24	; 0x37
     e52:	98 af       	std	Y+56, r25	; 0x38
     e54:	a9 af       	std	Y+57, r26	; 0x39
     e56:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     e58:	6f a9       	ldd	r22, Y+55	; 0x37
     e5a:	78 ad       	ldd	r23, Y+56	; 0x38
     e5c:	89 ad       	ldd	r24, Y+57	; 0x39
     e5e:	9a ad       	ldd	r25, Y+58	; 0x3a
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e8       	ldi	r20, 0x80	; 128
     e66:	5f e3       	ldi	r21, 0x3F	; 63
     e68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e6c:	88 23       	and	r24, r24
     e6e:	1c f4       	brge	.+6      	; 0xe76 <HLCD_U8Init+0x1d8>
		__ticks = 1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	8e ab       	std	Y+54, r24	; 0x36
     e74:	91 c0       	rjmp	.+290    	; 0xf98 <HLCD_U8Init+0x2fa>
	else if (__tmp > 255)
     e76:	6f a9       	ldd	r22, Y+55	; 0x37
     e78:	78 ad       	ldd	r23, Y+56	; 0x38
     e7a:	89 ad       	ldd	r24, Y+57	; 0x39
     e7c:	9a ad       	ldd	r25, Y+58	; 0x3a
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	4f e7       	ldi	r20, 0x7F	; 127
     e84:	53 e4       	ldi	r21, 0x43	; 67
     e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e8a:	18 16       	cp	r1, r24
     e8c:	0c f0       	brlt	.+2      	; 0xe90 <HLCD_U8Init+0x1f2>
     e8e:	7b c0       	rjmp	.+246    	; 0xf86 <HLCD_U8Init+0x2e8>
	{
		_delay_ms(__us / 1000.0);
     e90:	6b ad       	ldd	r22, Y+59	; 0x3b
     e92:	7c ad       	ldd	r23, Y+60	; 0x3c
     e94:	8d ad       	ldd	r24, Y+61	; 0x3d
     e96:	9e ad       	ldd	r25, Y+62	; 0x3e
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	4a e7       	ldi	r20, 0x7A	; 122
     e9e:	54 e4       	ldi	r21, 0x44	; 68
     ea0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	8a ab       	std	Y+50, r24	; 0x32
     eaa:	9b ab       	std	Y+51, r25	; 0x33
     eac:	ac ab       	std	Y+52, r26	; 0x34
     eae:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb0:	6a a9       	ldd	r22, Y+50	; 0x32
     eb2:	7b a9       	ldd	r23, Y+51	; 0x33
     eb4:	8c a9       	ldd	r24, Y+52	; 0x34
     eb6:	9d a9       	ldd	r25, Y+53	; 0x35
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	4a ef       	ldi	r20, 0xFA	; 250
     ebe:	54 e4       	ldi	r21, 0x44	; 68
     ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	8e a7       	std	Y+46, r24	; 0x2e
     eca:	9f a7       	std	Y+47, r25	; 0x2f
     ecc:	a8 ab       	std	Y+48, r26	; 0x30
     ece:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     ed0:	6e a5       	ldd	r22, Y+46	; 0x2e
     ed2:	7f a5       	ldd	r23, Y+47	; 0x2f
     ed4:	88 a9       	ldd	r24, Y+48	; 0x30
     ed6:	99 a9       	ldd	r25, Y+49	; 0x31
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e8       	ldi	r20, 0x80	; 128
     ede:	5f e3       	ldi	r21, 0x3F	; 63
     ee0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ee4:	88 23       	and	r24, r24
     ee6:	2c f4       	brge	.+10     	; 0xef2 <HLCD_U8Init+0x254>
		__ticks = 1;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	9d a7       	std	Y+45, r25	; 0x2d
     eee:	8c a7       	std	Y+44, r24	; 0x2c
     ef0:	3f c0       	rjmp	.+126    	; 0xf70 <HLCD_U8Init+0x2d2>
	else if (__tmp > 65535)
     ef2:	6e a5       	ldd	r22, Y+46	; 0x2e
     ef4:	7f a5       	ldd	r23, Y+47	; 0x2f
     ef6:	88 a9       	ldd	r24, Y+48	; 0x30
     ef8:	99 a9       	ldd	r25, Y+49	; 0x31
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	3f ef       	ldi	r19, 0xFF	; 255
     efe:	4f e7       	ldi	r20, 0x7F	; 127
     f00:	57 e4       	ldi	r21, 0x47	; 71
     f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f06:	18 16       	cp	r1, r24
     f08:	4c f5       	brge	.+82     	; 0xf5c <HLCD_U8Init+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0a:	6a a9       	ldd	r22, Y+50	; 0x32
     f0c:	7b a9       	ldd	r23, Y+51	; 0x33
     f0e:	8c a9       	ldd	r24, Y+52	; 0x34
     f10:	9d a9       	ldd	r25, Y+53	; 0x35
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e2       	ldi	r20, 0x20	; 32
     f18:	51 e4       	ldi	r21, 0x41	; 65
     f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	bc 01       	movw	r22, r24
     f24:	cd 01       	movw	r24, r26
     f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	9d a7       	std	Y+45, r25	; 0x2d
     f30:	8c a7       	std	Y+44, r24	; 0x2c
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <HLCD_U8Init+0x2b4>
     f34:	88 ec       	ldi	r24, 0xC8	; 200
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9b a7       	std	Y+43, r25	; 0x2b
     f3a:	8a a7       	std	Y+42, r24	; 0x2a
     f3c:	8a a5       	ldd	r24, Y+42	; 0x2a
     f3e:	9b a5       	ldd	r25, Y+43	; 0x2b
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <HLCD_U8Init+0x2a2>
     f44:	9b a7       	std	Y+43, r25	; 0x2b
     f46:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f48:	8c a5       	ldd	r24, Y+44	; 0x2c
     f4a:	9d a5       	ldd	r25, Y+45	; 0x2d
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	9d a7       	std	Y+45, r25	; 0x2d
     f50:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f52:	8c a5       	ldd	r24, Y+44	; 0x2c
     f54:	9d a5       	ldd	r25, Y+45	; 0x2d
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	69 f7       	brne	.-38     	; 0xf34 <HLCD_U8Init+0x296>
     f5a:	24 c0       	rjmp	.+72     	; 0xfa4 <HLCD_U8Init+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5c:	6e a5       	ldd	r22, Y+46	; 0x2e
     f5e:	7f a5       	ldd	r23, Y+47	; 0x2f
     f60:	88 a9       	ldd	r24, Y+48	; 0x30
     f62:	99 a9       	ldd	r25, Y+49	; 0x31
     f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	9d a7       	std	Y+45, r25	; 0x2d
     f6e:	8c a7       	std	Y+44, r24	; 0x2c
     f70:	8c a5       	ldd	r24, Y+44	; 0x2c
     f72:	9d a5       	ldd	r25, Y+45	; 0x2d
     f74:	99 a7       	std	Y+41, r25	; 0x29
     f76:	88 a7       	std	Y+40, r24	; 0x28
     f78:	88 a5       	ldd	r24, Y+40	; 0x28
     f7a:	99 a5       	ldd	r25, Y+41	; 0x29
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <HLCD_U8Init+0x2de>
     f80:	99 a7       	std	Y+41, r25	; 0x29
     f82:	88 a7       	std	Y+40, r24	; 0x28
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <HLCD_U8Init+0x306>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f86:	6f a9       	ldd	r22, Y+55	; 0x37
     f88:	78 ad       	ldd	r23, Y+56	; 0x38
     f8a:	89 ad       	ldd	r24, Y+57	; 0x39
     f8c:	9a ad       	ldd	r25, Y+58	; 0x3a
     f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	8e ab       	std	Y+54, r24	; 0x36
     f98:	8e a9       	ldd	r24, Y+54	; 0x36
     f9a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f9c:	8f a1       	ldd	r24, Y+39	; 0x27
     f9e:	8a 95       	dec	r24
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <HLCD_U8Init+0x300>
     fa2:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	/*send display on\off command*/
	HLCD_U8WriteCommand(0b00001111);
     fa4:	8f e0       	ldi	r24, 0x0F	; 15
     fa6:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a0 e2       	ldi	r26, 0x20	; 32
     fb0:	b2 e4       	ldi	r27, 0x42	; 66
     fb2:	8b a3       	std	Y+35, r24	; 0x23
     fb4:	9c a3       	std	Y+36, r25	; 0x24
     fb6:	ad a3       	std	Y+37, r26	; 0x25
     fb8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fba:	6b a1       	ldd	r22, Y+35	; 0x23
     fbc:	7c a1       	ldd	r23, Y+36	; 0x24
     fbe:	8d a1       	ldd	r24, Y+37	; 0x25
     fc0:	9e a1       	ldd	r25, Y+38	; 0x26
     fc2:	2b ea       	ldi	r18, 0xAB	; 171
     fc4:	3a ea       	ldi	r19, 0xAA	; 170
     fc6:	4a e2       	ldi	r20, 0x2A	; 42
     fc8:	50 e4       	ldi	r21, 0x40	; 64
     fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	8f 8f       	std	Y+31, r24	; 0x1f
     fd4:	98 a3       	std	Y+32, r25	; 0x20
     fd6:	a9 a3       	std	Y+33, r26	; 0x21
     fd8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     fda:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fdc:	78 a1       	ldd	r23, Y+32	; 0x20
     fde:	89 a1       	ldd	r24, Y+33	; 0x21
     fe0:	9a a1       	ldd	r25, Y+34	; 0x22
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e8       	ldi	r20, 0x80	; 128
     fe8:	5f e3       	ldi	r21, 0x3F	; 63
     fea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fee:	88 23       	and	r24, r24
     ff0:	1c f4       	brge	.+6      	; 0xff8 <HLCD_U8Init+0x35a>
		__ticks = 1;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	8e 8f       	std	Y+30, r24	; 0x1e
     ff6:	91 c0       	rjmp	.+290    	; 0x111a <HLCD_U8Init+0x47c>
	else if (__tmp > 255)
     ff8:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ffa:	78 a1       	ldd	r23, Y+32	; 0x20
     ffc:	89 a1       	ldd	r24, Y+33	; 0x21
     ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	53 e4       	ldi	r21, 0x43	; 67
    1008:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	0c f0       	brlt	.+2      	; 0x1012 <HLCD_U8Init+0x374>
    1010:	7b c0       	rjmp	.+246    	; 0x1108 <HLCD_U8Init+0x46a>
	{
		_delay_ms(__us / 1000.0);
    1012:	6b a1       	ldd	r22, Y+35	; 0x23
    1014:	7c a1       	ldd	r23, Y+36	; 0x24
    1016:	8d a1       	ldd	r24, Y+37	; 0x25
    1018:	9e a1       	ldd	r25, Y+38	; 0x26
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	4a e7       	ldi	r20, 0x7A	; 122
    1020:	54 e4       	ldi	r21, 0x44	; 68
    1022:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	8a 8f       	std	Y+26, r24	; 0x1a
    102c:	9b 8f       	std	Y+27, r25	; 0x1b
    102e:	ac 8f       	std	Y+28, r26	; 0x1c
    1030:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1032:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1034:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1036:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1038:	9d 8d       	ldd	r25, Y+29	; 0x1d
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	4a ef       	ldi	r20, 0xFA	; 250
    1040:	54 e4       	ldi	r21, 0x44	; 68
    1042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	8e 8b       	std	Y+22, r24	; 0x16
    104c:	9f 8b       	std	Y+23, r25	; 0x17
    104e:	a8 8f       	std	Y+24, r26	; 0x18
    1050:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1052:	6e 89       	ldd	r22, Y+22	; 0x16
    1054:	7f 89       	ldd	r23, Y+23	; 0x17
    1056:	88 8d       	ldd	r24, Y+24	; 0x18
    1058:	99 8d       	ldd	r25, Y+25	; 0x19
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e8       	ldi	r20, 0x80	; 128
    1060:	5f e3       	ldi	r21, 0x3F	; 63
    1062:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1066:	88 23       	and	r24, r24
    1068:	2c f4       	brge	.+10     	; 0x1074 <HLCD_U8Init+0x3d6>
		__ticks = 1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9d 8b       	std	Y+21, r25	; 0x15
    1070:	8c 8b       	std	Y+20, r24	; 0x14
    1072:	3f c0       	rjmp	.+126    	; 0x10f2 <HLCD_U8Init+0x454>
	else if (__tmp > 65535)
    1074:	6e 89       	ldd	r22, Y+22	; 0x16
    1076:	7f 89       	ldd	r23, Y+23	; 0x17
    1078:	88 8d       	ldd	r24, Y+24	; 0x18
    107a:	99 8d       	ldd	r25, Y+25	; 0x19
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	3f ef       	ldi	r19, 0xFF	; 255
    1080:	4f e7       	ldi	r20, 0x7F	; 127
    1082:	57 e4       	ldi	r21, 0x47	; 71
    1084:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1088:	18 16       	cp	r1, r24
    108a:	4c f5       	brge	.+82     	; 0x10de <HLCD_U8Init+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    108e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1090:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1092:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e2       	ldi	r20, 0x20	; 32
    109a:	51 e4       	ldi	r21, 0x41	; 65
    109c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	bc 01       	movw	r22, r24
    10a6:	cd 01       	movw	r24, r26
    10a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	9d 8b       	std	Y+21, r25	; 0x15
    10b2:	8c 8b       	std	Y+20, r24	; 0x14
    10b4:	0f c0       	rjmp	.+30     	; 0x10d4 <HLCD_U8Init+0x436>
    10b6:	88 ec       	ldi	r24, 0xC8	; 200
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9b 8b       	std	Y+19, r25	; 0x13
    10bc:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10be:	8a 89       	ldd	r24, Y+18	; 0x12
    10c0:	9b 89       	ldd	r25, Y+19	; 0x13
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <HLCD_U8Init+0x424>
    10c6:	9b 8b       	std	Y+19, r25	; 0x13
    10c8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ca:	8c 89       	ldd	r24, Y+20	; 0x14
    10cc:	9d 89       	ldd	r25, Y+21	; 0x15
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	9d 8b       	std	Y+21, r25	; 0x15
    10d2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d4:	8c 89       	ldd	r24, Y+20	; 0x14
    10d6:	9d 89       	ldd	r25, Y+21	; 0x15
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	69 f7       	brne	.-38     	; 0x10b6 <HLCD_U8Init+0x418>
    10dc:	24 c0       	rjmp	.+72     	; 0x1126 <HLCD_U8Init+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10de:	6e 89       	ldd	r22, Y+22	; 0x16
    10e0:	7f 89       	ldd	r23, Y+23	; 0x17
    10e2:	88 8d       	ldd	r24, Y+24	; 0x18
    10e4:	99 8d       	ldd	r25, Y+25	; 0x19
    10e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	9d 8b       	std	Y+21, r25	; 0x15
    10f0:	8c 8b       	std	Y+20, r24	; 0x14
    10f2:	8c 89       	ldd	r24, Y+20	; 0x14
    10f4:	9d 89       	ldd	r25, Y+21	; 0x15
    10f6:	99 8b       	std	Y+17, r25	; 0x11
    10f8:	88 8b       	std	Y+16, r24	; 0x10
    10fa:	88 89       	ldd	r24, Y+16	; 0x10
    10fc:	99 89       	ldd	r25, Y+17	; 0x11
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <HLCD_U8Init+0x460>
    1102:	99 8b       	std	Y+17, r25	; 0x11
    1104:	88 8b       	std	Y+16, r24	; 0x10
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <HLCD_U8Init+0x488>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1108:	6f 8d       	ldd	r22, Y+31	; 0x1f
    110a:	78 a1       	ldd	r23, Y+32	; 0x20
    110c:	89 a1       	ldd	r24, Y+33	; 0x21
    110e:	9a a1       	ldd	r25, Y+34	; 0x22
    1110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	8e 8f       	std	Y+30, r24	; 0x1e
    111a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    111c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    111e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1120:	8a 95       	dec	r24
    1122:	f1 f7       	brne	.-4      	; 0x1120 <HLCD_U8Init+0x482>
    1124:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/*send display CLEAR command*/
	HLCD_U8WriteCommand(0b00000001);
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e4       	ldi	r27, 0x40	; 64
    1134:	8b 87       	std	Y+11, r24	; 0x0b
    1136:	9c 87       	std	Y+12, r25	; 0x0c
    1138:	ad 87       	std	Y+13, r26	; 0x0d
    113a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113c:	6b 85       	ldd	r22, Y+11	; 0x0b
    113e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1140:	8d 85       	ldd	r24, Y+13	; 0x0d
    1142:	9e 85       	ldd	r25, Y+14	; 0x0e
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	4a ef       	ldi	r20, 0xFA	; 250
    114a:	54 e4       	ldi	r21, 0x44	; 68
    114c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	8f 83       	std	Y+7, r24	; 0x07
    1156:	98 87       	std	Y+8, r25	; 0x08
    1158:	a9 87       	std	Y+9, r26	; 0x09
    115a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    115c:	6f 81       	ldd	r22, Y+7	; 0x07
    115e:	78 85       	ldd	r23, Y+8	; 0x08
    1160:	89 85       	ldd	r24, Y+9	; 0x09
    1162:	9a 85       	ldd	r25, Y+10	; 0x0a
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e8       	ldi	r20, 0x80	; 128
    116a:	5f e3       	ldi	r21, 0x3F	; 63
    116c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1170:	88 23       	and	r24, r24
    1172:	2c f4       	brge	.+10     	; 0x117e <HLCD_U8Init+0x4e0>
		__ticks = 1;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	8d 83       	std	Y+5, r24	; 0x05
    117c:	3f c0       	rjmp	.+126    	; 0x11fc <HLCD_U8Init+0x55e>
	else if (__tmp > 65535)
    117e:	6f 81       	ldd	r22, Y+7	; 0x07
    1180:	78 85       	ldd	r23, Y+8	; 0x08
    1182:	89 85       	ldd	r24, Y+9	; 0x09
    1184:	9a 85       	ldd	r25, Y+10	; 0x0a
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	3f ef       	ldi	r19, 0xFF	; 255
    118a:	4f e7       	ldi	r20, 0x7F	; 127
    118c:	57 e4       	ldi	r21, 0x47	; 71
    118e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1192:	18 16       	cp	r1, r24
    1194:	4c f5       	brge	.+82     	; 0x11e8 <HLCD_U8Init+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1196:	6b 85       	ldd	r22, Y+11	; 0x0b
    1198:	7c 85       	ldd	r23, Y+12	; 0x0c
    119a:	8d 85       	ldd	r24, Y+13	; 0x0d
    119c:	9e 85       	ldd	r25, Y+14	; 0x0e
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e2       	ldi	r20, 0x20	; 32
    11a4:	51 e4       	ldi	r21, 0x41	; 65
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	9e 83       	std	Y+6, r25	; 0x06
    11bc:	8d 83       	std	Y+5, r24	; 0x05
    11be:	0f c0       	rjmp	.+30     	; 0x11de <HLCD_U8Init+0x540>
    11c0:	88 ec       	ldi	r24, 0xC8	; 200
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9c 83       	std	Y+4, r25	; 0x04
    11c6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <HLCD_U8Init+0x52e>
    11d0:	9c 83       	std	Y+4, r25	; 0x04
    11d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	9e 83       	std	Y+6, r25	; 0x06
    11dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	69 f7       	brne	.-38     	; 0x11c0 <HLCD_U8Init+0x522>
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <HLCD_U8Init+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ea:	78 85       	ldd	r23, Y+8	; 0x08
    11ec:	89 85       	ldd	r24, Y+9	; 0x09
    11ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	9e 83       	std	Y+6, r25	; 0x06
    11fa:	8d 83       	std	Y+5, r24	; 0x05
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <HLCD_U8Init+0x56a>
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send ENTERY MODE SET command*/
	HLCD_U8WriteCommand(0b00000110);
    1210:	86 e0       	ldi	r24, 0x06	; 6
    1212:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
	return Local_u8ErrorState;
    1216:	fe 01       	movw	r30, r28
    1218:	e3 5b       	subi	r30, 0xB3	; 179
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 81       	ld	r24, Z
}
    121e:	c3 5b       	subi	r28, 0xB3	; 179
    1220:	df 4f       	sbci	r29, 0xFF	; 255
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <HLCD_U8WriteChar>:
u8 HLCD_U8WriteChar(u8 Copy_u8Char){
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	6a 97       	sbiw	r28, 0x1a	; 26
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8ErrorState = STD_TYPES_OK;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	89 8f       	std	Y+25, r24	; 0x19
	/*1- set RS high(Data)
	 *2- set RW low to write
	 *3- send command on data pins
	 *4- send pulse to enable(E) pin to let LCD read the data */
	MDIO_u8SetPinValue(HLCD_U8_RS_PORT,HLCD_U8_RS_PIN,MDIO_U8_HIGH);
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	41 e0       	ldi	r20, 0x01	; 1
    1256:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(HLCD_U8_RW_PORT,HLCD_U8_RW_PIN,MDIO_U8_LOW);
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	61 e0       	ldi	r22, 0x01	; 1
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	MDIO_u8SetPortValue(HLCD_U8_DATA_PORT,Copy_u8Char);
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1268:	0e 94 9f 11 	call	0x233e	; 0x233e <MDIO_u8SetPortValue>
	MDIO_u8SetPinValue(HLCD_U8_E_PORT,HLCD_U8_E_PIN,MDIO_U8_HIGH);
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	62 e0       	ldi	r22, 0x02	; 2
    1270:	41 e0       	ldi	r20, 0x01	; 1
    1272:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e8       	ldi	r26, 0x80	; 128
    127c:	bf e3       	ldi	r27, 0x3F	; 63
    127e:	8d 8b       	std	Y+21, r24	; 0x15
    1280:	9e 8b       	std	Y+22, r25	; 0x16
    1282:	af 8b       	std	Y+23, r26	; 0x17
    1284:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1286:	6d 89       	ldd	r22, Y+21	; 0x15
    1288:	7e 89       	ldd	r23, Y+22	; 0x16
    128a:	8f 89       	ldd	r24, Y+23	; 0x17
    128c:	98 8d       	ldd	r25, Y+24	; 0x18
    128e:	2b ea       	ldi	r18, 0xAB	; 171
    1290:	3a ea       	ldi	r19, 0xAA	; 170
    1292:	4a e2       	ldi	r20, 0x2A	; 42
    1294:	50 e4       	ldi	r21, 0x40	; 64
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	89 8b       	std	Y+17, r24	; 0x11
    12a0:	9a 8b       	std	Y+18, r25	; 0x12
    12a2:	ab 8b       	std	Y+19, r26	; 0x13
    12a4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    12a6:	69 89       	ldd	r22, Y+17	; 0x11
    12a8:	7a 89       	ldd	r23, Y+18	; 0x12
    12aa:	8b 89       	ldd	r24, Y+19	; 0x13
    12ac:	9c 89       	ldd	r25, Y+20	; 0x14
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e8       	ldi	r20, 0x80	; 128
    12b4:	5f e3       	ldi	r21, 0x3F	; 63
    12b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12ba:	88 23       	and	r24, r24
    12bc:	1c f4       	brge	.+6      	; 0x12c4 <HLCD_U8WriteChar+0x8e>
		__ticks = 1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	88 8b       	std	Y+16, r24	; 0x10
    12c2:	91 c0       	rjmp	.+290    	; 0x13e6 <HLCD_U8WriteChar+0x1b0>
	else if (__tmp > 255)
    12c4:	69 89       	ldd	r22, Y+17	; 0x11
    12c6:	7a 89       	ldd	r23, Y+18	; 0x12
    12c8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ca:	9c 89       	ldd	r25, Y+20	; 0x14
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	53 e4       	ldi	r21, 0x43	; 67
    12d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12d8:	18 16       	cp	r1, r24
    12da:	0c f0       	brlt	.+2      	; 0x12de <HLCD_U8WriteChar+0xa8>
    12dc:	7b c0       	rjmp	.+246    	; 0x13d4 <HLCD_U8WriteChar+0x19e>
	{
		_delay_ms(__us / 1000.0);
    12de:	6d 89       	ldd	r22, Y+21	; 0x15
    12e0:	7e 89       	ldd	r23, Y+22	; 0x16
    12e2:	8f 89       	ldd	r24, Y+23	; 0x17
    12e4:	98 8d       	ldd	r25, Y+24	; 0x18
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a e7       	ldi	r20, 0x7A	; 122
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	8c 87       	std	Y+12, r24	; 0x0c
    12f8:	9d 87       	std	Y+13, r25	; 0x0d
    12fa:	ae 87       	std	Y+14, r26	; 0x0e
    12fc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1300:	7d 85       	ldd	r23, Y+13	; 0x0d
    1302:	8e 85       	ldd	r24, Y+14	; 0x0e
    1304:	9f 85       	ldd	r25, Y+15	; 0x0f
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	4a ef       	ldi	r20, 0xFA	; 250
    130c:	54 e4       	ldi	r21, 0x44	; 68
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	88 87       	std	Y+8, r24	; 0x08
    1318:	99 87       	std	Y+9, r25	; 0x09
    131a:	aa 87       	std	Y+10, r26	; 0x0a
    131c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    131e:	68 85       	ldd	r22, Y+8	; 0x08
    1320:	79 85       	ldd	r23, Y+9	; 0x09
    1322:	8a 85       	ldd	r24, Y+10	; 0x0a
    1324:	9b 85       	ldd	r25, Y+11	; 0x0b
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e8       	ldi	r20, 0x80	; 128
    132c:	5f e3       	ldi	r21, 0x3F	; 63
    132e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1332:	88 23       	and	r24, r24
    1334:	2c f4       	brge	.+10     	; 0x1340 <HLCD_U8WriteChar+0x10a>
		__ticks = 1;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9f 83       	std	Y+7, r25	; 0x07
    133c:	8e 83       	std	Y+6, r24	; 0x06
    133e:	3f c0       	rjmp	.+126    	; 0x13be <HLCD_U8WriteChar+0x188>
	else if (__tmp > 65535)
    1340:	68 85       	ldd	r22, Y+8	; 0x08
    1342:	79 85       	ldd	r23, Y+9	; 0x09
    1344:	8a 85       	ldd	r24, Y+10	; 0x0a
    1346:	9b 85       	ldd	r25, Y+11	; 0x0b
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	4f e7       	ldi	r20, 0x7F	; 127
    134e:	57 e4       	ldi	r21, 0x47	; 71
    1350:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1354:	18 16       	cp	r1, r24
    1356:	4c f5       	brge	.+82     	; 0x13aa <HLCD_U8WriteChar+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1358:	6c 85       	ldd	r22, Y+12	; 0x0c
    135a:	7d 85       	ldd	r23, Y+13	; 0x0d
    135c:	8e 85       	ldd	r24, Y+14	; 0x0e
    135e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e2       	ldi	r20, 0x20	; 32
    1366:	51 e4       	ldi	r21, 0x41	; 65
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9f 83       	std	Y+7, r25	; 0x07
    137e:	8e 83       	std	Y+6, r24	; 0x06
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <HLCD_U8WriteChar+0x16a>
    1382:	88 ec       	ldi	r24, 0xC8	; 200
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9d 83       	std	Y+5, r25	; 0x05
    1388:	8c 83       	std	Y+4, r24	; 0x04
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <HLCD_U8WriteChar+0x158>
    1392:	9d 83       	std	Y+5, r25	; 0x05
    1394:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1396:	8e 81       	ldd	r24, Y+6	; 0x06
    1398:	9f 81       	ldd	r25, Y+7	; 0x07
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9f 83       	std	Y+7, r25	; 0x07
    139e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a0:	8e 81       	ldd	r24, Y+6	; 0x06
    13a2:	9f 81       	ldd	r25, Y+7	; 0x07
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	69 f7       	brne	.-38     	; 0x1382 <HLCD_U8WriteChar+0x14c>
    13a8:	24 c0       	rjmp	.+72     	; 0x13f2 <HLCD_U8WriteChar+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13aa:	68 85       	ldd	r22, Y+8	; 0x08
    13ac:	79 85       	ldd	r23, Y+9	; 0x09
    13ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    13b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9f 83       	std	Y+7, r25	; 0x07
    13bc:	8e 83       	std	Y+6, r24	; 0x06
    13be:	8e 81       	ldd	r24, Y+6	; 0x06
    13c0:	9f 81       	ldd	r25, Y+7	; 0x07
    13c2:	9b 83       	std	Y+3, r25	; 0x03
    13c4:	8a 83       	std	Y+2, r24	; 0x02
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <HLCD_U8WriteChar+0x194>
    13ce:	9b 83       	std	Y+3, r25	; 0x03
    13d0:	8a 83       	std	Y+2, r24	; 0x02
    13d2:	0f c0       	rjmp	.+30     	; 0x13f2 <HLCD_U8WriteChar+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13d4:	69 89       	ldd	r22, Y+17	; 0x11
    13d6:	7a 89       	ldd	r23, Y+18	; 0x12
    13d8:	8b 89       	ldd	r24, Y+19	; 0x13
    13da:	9c 89       	ldd	r25, Y+20	; 0x14
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	88 8b       	std	Y+16, r24	; 0x10
    13e6:	88 89       	ldd	r24, Y+16	; 0x10
    13e8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	8a 95       	dec	r24
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <HLCD_U8WriteChar+0x1b6>
    13f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	MDIO_u8SetPinValue(HLCD_U8_E_PORT,HLCD_U8_E_PIN,MDIO_U8_LOW);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	62 e0       	ldi	r22, 0x02	; 2
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	return Local_u8ErrorState;
    13fc:	89 8d       	ldd	r24, Y+25	; 0x19
}
    13fe:	6a 96       	adiw	r28, 0x1a	; 26
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <HLCD_U8WriteCommand>:
u8 HLCD_U8WriteCommand(u8 Copy_u8Cmnd){
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	6a 97       	sbiw	r28, 0x1a	; 26
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 8f       	std	Y+25, r24	; 0x19
	/*1- set RS low(Command)
	 *2- set RW low to write
	 *3- send command on data pins
	 *4- send pulse to enable(E) pin to let LCD read the data */
	MDIO_u8SetPinValue(HLCD_U8_RS_PORT,HLCD_U8_RS_PIN,MDIO_U8_LOW);
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(HLCD_U8_RW_PORT,HLCD_U8_RW_PIN,MDIO_U8_LOW);
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	61 e0       	ldi	r22, 0x01	; 1
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	MDIO_u8SetPortValue(HLCD_U8_DATA_PORT,Copy_u8Cmnd);
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1442:	0e 94 9f 11 	call	0x233e	; 0x233e <MDIO_u8SetPortValue>
	MDIO_u8SetPinValue(HLCD_U8_E_PORT,HLCD_U8_E_PIN,MDIO_U8_HIGH);
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	62 e0       	ldi	r22, 0x02	; 2
    144a:	41 e0       	ldi	r20, 0x01	; 1
    144c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e8       	ldi	r26, 0x80	; 128
    1456:	bf e3       	ldi	r27, 0x3F	; 63
    1458:	8d 8b       	std	Y+21, r24	; 0x15
    145a:	9e 8b       	std	Y+22, r25	; 0x16
    145c:	af 8b       	std	Y+23, r26	; 0x17
    145e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1460:	6d 89       	ldd	r22, Y+21	; 0x15
    1462:	7e 89       	ldd	r23, Y+22	; 0x16
    1464:	8f 89       	ldd	r24, Y+23	; 0x17
    1466:	98 8d       	ldd	r25, Y+24	; 0x18
    1468:	2b ea       	ldi	r18, 0xAB	; 171
    146a:	3a ea       	ldi	r19, 0xAA	; 170
    146c:	4a e2       	ldi	r20, 0x2A	; 42
    146e:	50 e4       	ldi	r21, 0x40	; 64
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	89 8b       	std	Y+17, r24	; 0x11
    147a:	9a 8b       	std	Y+18, r25	; 0x12
    147c:	ab 8b       	std	Y+19, r26	; 0x13
    147e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1480:	69 89       	ldd	r22, Y+17	; 0x11
    1482:	7a 89       	ldd	r23, Y+18	; 0x12
    1484:	8b 89       	ldd	r24, Y+19	; 0x13
    1486:	9c 89       	ldd	r25, Y+20	; 0x14
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1494:	88 23       	and	r24, r24
    1496:	1c f4       	brge	.+6      	; 0x149e <HLCD_U8WriteCommand+0x8e>
		__ticks = 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	88 8b       	std	Y+16, r24	; 0x10
    149c:	91 c0       	rjmp	.+290    	; 0x15c0 <HLCD_U8WriteCommand+0x1b0>
	else if (__tmp > 255)
    149e:	69 89       	ldd	r22, Y+17	; 0x11
    14a0:	7a 89       	ldd	r23, Y+18	; 0x12
    14a2:	8b 89       	ldd	r24, Y+19	; 0x13
    14a4:	9c 89       	ldd	r25, Y+20	; 0x14
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	4f e7       	ldi	r20, 0x7F	; 127
    14ac:	53 e4       	ldi	r21, 0x43	; 67
    14ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14b2:	18 16       	cp	r1, r24
    14b4:	0c f0       	brlt	.+2      	; 0x14b8 <HLCD_U8WriteCommand+0xa8>
    14b6:	7b c0       	rjmp	.+246    	; 0x15ae <HLCD_U8WriteCommand+0x19e>
	{
		_delay_ms(__us / 1000.0);
    14b8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ba:	7e 89       	ldd	r23, Y+22	; 0x16
    14bc:	8f 89       	ldd	r24, Y+23	; 0x17
    14be:	98 8d       	ldd	r25, Y+24	; 0x18
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a e7       	ldi	r20, 0x7A	; 122
    14c6:	54 e4       	ldi	r21, 0x44	; 68
    14c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	8c 87       	std	Y+12, r24	; 0x0c
    14d2:	9d 87       	std	Y+13, r25	; 0x0d
    14d4:	ae 87       	std	Y+14, r26	; 0x0e
    14d6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    14da:	7d 85       	ldd	r23, Y+13	; 0x0d
    14dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    14de:	9f 85       	ldd	r25, Y+15	; 0x0f
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	4a ef       	ldi	r20, 0xFA	; 250
    14e6:	54 e4       	ldi	r21, 0x44	; 68
    14e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	88 87       	std	Y+8, r24	; 0x08
    14f2:	99 87       	std	Y+9, r25	; 0x09
    14f4:	aa 87       	std	Y+10, r26	; 0x0a
    14f6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    14f8:	68 85       	ldd	r22, Y+8	; 0x08
    14fa:	79 85       	ldd	r23, Y+9	; 0x09
    14fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    14fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e8       	ldi	r20, 0x80	; 128
    1506:	5f e3       	ldi	r21, 0x3F	; 63
    1508:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    150c:	88 23       	and	r24, r24
    150e:	2c f4       	brge	.+10     	; 0x151a <HLCD_U8WriteCommand+0x10a>
		__ticks = 1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9f 83       	std	Y+7, r25	; 0x07
    1516:	8e 83       	std	Y+6, r24	; 0x06
    1518:	3f c0       	rjmp	.+126    	; 0x1598 <HLCD_U8WriteCommand+0x188>
	else if (__tmp > 65535)
    151a:	68 85       	ldd	r22, Y+8	; 0x08
    151c:	79 85       	ldd	r23, Y+9	; 0x09
    151e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1520:	9b 85       	ldd	r25, Y+11	; 0x0b
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	3f ef       	ldi	r19, 0xFF	; 255
    1526:	4f e7       	ldi	r20, 0x7F	; 127
    1528:	57 e4       	ldi	r21, 0x47	; 71
    152a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    152e:	18 16       	cp	r1, r24
    1530:	4c f5       	brge	.+82     	; 0x1584 <HLCD_U8WriteCommand+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1532:	6c 85       	ldd	r22, Y+12	; 0x0c
    1534:	7d 85       	ldd	r23, Y+13	; 0x0d
    1536:	8e 85       	ldd	r24, Y+14	; 0x0e
    1538:	9f 85       	ldd	r25, Y+15	; 0x0f
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e2       	ldi	r20, 0x20	; 32
    1540:	51 e4       	ldi	r21, 0x41	; 65
    1542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	9f 83       	std	Y+7, r25	; 0x07
    1558:	8e 83       	std	Y+6, r24	; 0x06
    155a:	0f c0       	rjmp	.+30     	; 0x157a <HLCD_U8WriteCommand+0x16a>
    155c:	88 ec       	ldi	r24, 0xC8	; 200
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9d 83       	std	Y+5, r25	; 0x05
    1562:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	9d 81       	ldd	r25, Y+5	; 0x05
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	f1 f7       	brne	.-4      	; 0x1568 <HLCD_U8WriteCommand+0x158>
    156c:	9d 83       	std	Y+5, r25	; 0x05
    156e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1570:	8e 81       	ldd	r24, Y+6	; 0x06
    1572:	9f 81       	ldd	r25, Y+7	; 0x07
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	9f 83       	std	Y+7, r25	; 0x07
    1578:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157a:	8e 81       	ldd	r24, Y+6	; 0x06
    157c:	9f 81       	ldd	r25, Y+7	; 0x07
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	69 f7       	brne	.-38     	; 0x155c <HLCD_U8WriteCommand+0x14c>
    1582:	24 c0       	rjmp	.+72     	; 0x15cc <HLCD_U8WriteCommand+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1584:	68 85       	ldd	r22, Y+8	; 0x08
    1586:	79 85       	ldd	r23, Y+9	; 0x09
    1588:	8a 85       	ldd	r24, Y+10	; 0x0a
    158a:	9b 85       	ldd	r25, Y+11	; 0x0b
    158c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9f 83       	std	Y+7, r25	; 0x07
    1596:	8e 83       	std	Y+6, r24	; 0x06
    1598:	8e 81       	ldd	r24, Y+6	; 0x06
    159a:	9f 81       	ldd	r25, Y+7	; 0x07
    159c:	9b 83       	std	Y+3, r25	; 0x03
    159e:	8a 83       	std	Y+2, r24	; 0x02
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	9b 81       	ldd	r25, Y+3	; 0x03
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <HLCD_U8WriteCommand+0x194>
    15a8:	9b 83       	std	Y+3, r25	; 0x03
    15aa:	8a 83       	std	Y+2, r24	; 0x02
    15ac:	0f c0       	rjmp	.+30     	; 0x15cc <HLCD_U8WriteCommand+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15ae:	69 89       	ldd	r22, Y+17	; 0x11
    15b0:	7a 89       	ldd	r23, Y+18	; 0x12
    15b2:	8b 89       	ldd	r24, Y+19	; 0x13
    15b4:	9c 89       	ldd	r25, Y+20	; 0x14
    15b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	88 8b       	std	Y+16, r24	; 0x10
    15c0:	88 89       	ldd	r24, Y+16	; 0x10
    15c2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	8a 95       	dec	r24
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <HLCD_U8WriteCommand+0x1b6>
    15ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	MDIO_u8SetPinValue(HLCD_U8_E_PORT,HLCD_U8_E_PIN,MDIO_U8_LOW);
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	62 e0       	ldi	r22, 0x02	; 2
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	return Local_u8ErrorState;
    15d6:	89 8d       	ldd	r24, Y+25	; 0x19

}
    15d8:	6a 96       	adiw	r28, 0x1a	; 26
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <HLCD_U8SetCursor>:
u8 HLCD_U8SetCursor(u8 Copy_u8LineNumber , u8 Copy_u8CharacterNumber){
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <HLCD_U8SetCursor+0x6>
    15f0:	0f 92       	push	r0
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	89 83       	std	Y+1, r24	; 0x01
	HLCD_U8WriteCommand((0x80|(Copy_u8LineNumber<<6))+Copy_u8CharacterNumber);
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	00 24       	eor	r0, r0
    1606:	96 95       	lsr	r25
    1608:	87 95       	ror	r24
    160a:	07 94       	ror	r0
    160c:	96 95       	lsr	r25
    160e:	87 95       	ror	r24
    1610:	07 94       	ror	r0
    1612:	98 2f       	mov	r25, r24
    1614:	80 2d       	mov	r24, r0
    1616:	80 68       	ori	r24, 0x80	; 128
    1618:	98 2f       	mov	r25, r24
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	89 0f       	add	r24, r25
    161e:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
	return Local_u8ErrorState;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <HLCD_U8ClearLCD>:
void HLCD_U8ClearLCD(void){
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
	HLCD_U8WriteCommand(0b00000001);
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <HLCD_U8DrawChar>:

void HLCD_U8DrawChar(u8 Copy_u8LineNumber , u8 Copy_u8CharacterNumber , u8 Copy_CharIndex , u8 * Copy_CustomChar){
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <HLCD_U8DrawChar+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <HLCD_U8DrawChar+0x8>
    164c:	00 d0       	rcall	.+0      	; 0x164e <HLCD_U8DrawChar+0xa>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	6b 83       	std	Y+3, r22	; 0x03
    1656:	4c 83       	std	Y+4, r20	; 0x04
    1658:	3e 83       	std	Y+6, r19	; 0x06
    165a:	2d 83       	std	Y+5, r18	; 0x05
	HLCD_U8WriteCommand( 0b01000000 + (Copy_CharIndex*8));
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	88 2f       	mov	r24, r24
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	08 96       	adiw	r24, 0x08	; 8
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
	for(u8 i=0 ; i<8 ; i++){
    1674:	19 82       	std	Y+1, r1	; 0x01
    1676:	0e c0       	rjmp	.+28     	; 0x1694 <HLCD_U8DrawChar+0x50>
		HLCD_U8WriteChar(Copy_CustomChar[i]);
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	fc 01       	movw	r30, r24
    1684:	e2 0f       	add	r30, r18
    1686:	f3 1f       	adc	r31, r19
    1688:	80 81       	ld	r24, Z
    168a:	0e 94 1b 09 	call	0x1236	; 0x1236 <HLCD_U8WriteChar>
	HLCD_U8WriteCommand(0b00000001);
}

void HLCD_U8DrawChar(u8 Copy_u8LineNumber , u8 Copy_u8CharacterNumber , u8 Copy_CharIndex , u8 * Copy_CustomChar){
	HLCD_U8WriteCommand( 0b01000000 + (Copy_CharIndex*8));
	for(u8 i=0 ; i<8 ; i++){
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	8f 5f       	subi	r24, 0xFF	; 255
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	88 30       	cpi	r24, 0x08	; 8
    1698:	78 f3       	brcs	.-34     	; 0x1678 <HLCD_U8DrawChar+0x34>
		HLCD_U8WriteChar(Copy_CustomChar[i]);
	}
	/*PUT AC back to DDRAM*/
	HLCD_U8SetCursor(Copy_u8LineNumber,Copy_u8CharacterNumber);
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	6b 81       	ldd	r22, Y+3	; 0x03
    169e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
	/*Display drawn chs on LCD*/
	HLCD_U8WriteChar(Copy_CharIndex);
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	0e 94 1b 09 	call	0x1236	; 0x1236 <HLCD_U8WriteChar>
}
    16a8:	26 96       	adiw	r28, 0x06	; 6
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <HLCD_U8WriteString>:

u8 HLCD_U8WriteString(u8 * Copy_u8String){
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <HLCD_U8WriteString+0x6>
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	9a 83       	std	Y+2, r25	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	0a c0       	rjmp	.+20     	; 0x16de <HLCD_U8WriteString+0x24>

	while(*Copy_u8String){
		HLCD_U8WriteChar(*Copy_u8String);
    16ca:	e9 81       	ldd	r30, Y+1	; 0x01
    16cc:	fa 81       	ldd	r31, Y+2	; 0x02
    16ce:	80 81       	ld	r24, Z
    16d0:	0e 94 1b 09 	call	0x1236	; 0x1236 <HLCD_U8WriteChar>
		Copy_u8String++;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	89 83       	std	Y+1, r24	; 0x01
	HLCD_U8WriteChar(Copy_CharIndex);
}

u8 HLCD_U8WriteString(u8 * Copy_u8String){

	while(*Copy_u8String){
    16de:	e9 81       	ldd	r30, Y+1	; 0x01
    16e0:	fa 81       	ldd	r31, Y+2	; 0x02
    16e2:	80 81       	ld	r24, Z
    16e4:	88 23       	and	r24, r24
    16e6:	89 f7       	brne	.-30     	; 0x16ca <HLCD_U8WriteString+0x10>
		HLCD_U8WriteChar(*Copy_u8String);
		Copy_u8String++;
	}
	return STD_TYPES_OK;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <HLCD_U8WriteNumber>:

u8 HLCD_U8WriteNumber(u16  Copy_u8Number){
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	60 97       	sbiw	r28, 0x10	; 16
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	9a 87       	std	Y+10, r25	; 0x0a
    170a:	89 87       	std	Y+9, r24	; 0x09
	}
	for(j=0 ; j<i ; j++){
		HLCD_U8WriteChar(arr[j]);
	}
	return Local_u8ErrorState;
}
    170c:	2d b7       	in	r18, 0x3d	; 61
    170e:	3e b7       	in	r19, 0x3e	; 62
    1710:	38 8b       	std	Y+16, r19	; 0x10
    1712:	2f 87       	std	Y+15, r18	; 0x0f
		Copy_u8String++;
	}
	return STD_TYPES_OK;
}

u8 HLCD_U8WriteNumber(u16  Copy_u8Number){
    1714:	8d b7       	in	r24, 0x3d	; 61
    1716:	9e b7       	in	r25, 0x3e	; 62
    1718:	9c 87       	std	Y+12, r25	; 0x0c
    171a:	8b 87       	std	Y+11, r24	; 0x0b
	int Local_u8ErrorState = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
	int j = Copy_u8Number;
    1724:	89 85       	ldd	r24, Y+9	; 0x09
    1726:	9a 85       	ldd	r25, Y+10	; 0x0a
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    172c:	1a 82       	std	Y+2, r1	; 0x02
    172e:	19 82       	std	Y+1, r1	; 0x01
	do {
		j /= 10;
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	2a e0       	ldi	r18, 0x0A	; 10
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	b9 01       	movw	r22, r18
    173a:	0e 94 bf 1a 	call	0x357e	; 0x357e <__divmodhi4>
    173e:	cb 01       	movw	r24, r22
    1740:	9c 83       	std	Y+4, r25	; 0x04
    1742:	8b 83       	std	Y+3, r24	; 0x03
		++i;
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
	}

	while (j != 0);
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	69 f7       	brne	.-38     	; 0x1730 <HLCD_U8WriteNumber+0x3c>
	int arr[i];
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	2d b7       	in	r18, 0x3d	; 61
    1760:	3e b7       	in	r19, 0x3e	; 62
    1762:	28 1b       	sub	r18, r24
    1764:	39 0b       	sbc	r19, r25
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	3e bf       	out	0x3e, r19	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	2d bf       	out	0x3d, r18	; 61
    1770:	8d b7       	in	r24, 0x3d	; 61
    1772:	9e b7       	in	r25, 0x3e	; 62
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	9e 87       	std	Y+14, r25	; 0x0e
    1778:	8d 87       	std	Y+13, r24	; 0x0d
    177a:	8d 85       	ldd	r24, Y+13	; 0x0d
    177c:	9e 85       	ldd	r25, Y+14	; 0x0e
    177e:	00 96       	adiw	r24, 0x00	; 0
    1780:	9e 87       	std	Y+14, r25	; 0x0e
    1782:	8d 87       	std	Y+13, r24	; 0x0d
    1784:	2d 85       	ldd	r18, Y+13	; 0x0d
    1786:	3e 85       	ldd	r19, Y+14	; 0x0e
    1788:	38 87       	std	Y+8, r19	; 0x08
    178a:	2f 83       	std	Y+7, r18	; 0x07
	for(j=i-1 ; j>=0 ; j--){
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	8b 83       	std	Y+3, r24	; 0x03
    1796:	24 c0       	rjmp	.+72     	; 0x17e0 <HLCD_U8WriteNumber+0xec>
		arr[j] = ((Copy_u8Number) % 10)+48;
    1798:	eb 81       	ldd	r30, Y+3	; 0x03
    179a:	fc 81       	ldd	r31, Y+4	; 0x04
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	2a e0       	ldi	r18, 0x0A	; 10
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	b9 01       	movw	r22, r18
    17a6:	0e 94 ab 1a 	call	0x3556	; 0x3556 <__udivmodhi4>
    17aa:	c0 96       	adiw	r24, 0x30	; 48
    17ac:	ac 01       	movw	r20, r24
    17ae:	2f 81       	ldd	r18, Y+7	; 0x07
    17b0:	38 85       	ldd	r19, Y+8	; 0x08
    17b2:	cf 01       	movw	r24, r30
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	f9 01       	movw	r30, r18
    17ba:	e8 0f       	add	r30, r24
    17bc:	f9 1f       	adc	r31, r25
    17be:	51 83       	std	Z+1, r21	; 0x01
    17c0:	40 83       	st	Z, r20
		(Copy_u8Number)= (Copy_u8Number)/10;
    17c2:	89 85       	ldd	r24, Y+9	; 0x09
    17c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c6:	2a e0       	ldi	r18, 0x0A	; 10
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	b9 01       	movw	r22, r18
    17cc:	0e 94 ab 1a 	call	0x3556	; 0x3556 <__udivmodhi4>
    17d0:	cb 01       	movw	r24, r22
    17d2:	9a 87       	std	Y+10, r25	; 0x0a
    17d4:	89 87       	std	Y+9, r24	; 0x09
		++i;
	}

	while (j != 0);
	int arr[i];
	for(j=i-1 ; j>=0 ; j--){
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9c 83       	std	Y+4, r25	; 0x04
    17de:	8b 83       	std	Y+3, r24	; 0x03
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	99 23       	and	r25, r25
    17e6:	c4 f6       	brge	.-80     	; 0x1798 <HLCD_U8WriteNumber+0xa4>
		arr[j] = ((Copy_u8Number) % 10)+48;
		(Copy_u8Number)= (Copy_u8Number)/10;
	}
	for(j=0 ; j<i ; j++){
    17e8:	1c 82       	std	Y+4, r1	; 0x04
    17ea:	1b 82       	std	Y+3, r1	; 0x03
    17ec:	12 c0       	rjmp	.+36     	; 0x1812 <HLCD_U8WriteNumber+0x11e>
		HLCD_U8WriteChar(arr[j]);
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	2f 81       	ldd	r18, Y+7	; 0x07
    17f4:	38 85       	ldd	r19, Y+8	; 0x08
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	f9 01       	movw	r30, r18
    17fc:	e8 0f       	add	r30, r24
    17fe:	f9 1f       	adc	r31, r25
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	0e 94 1b 09 	call	0x1236	; 0x1236 <HLCD_U8WriteChar>
	int arr[i];
	for(j=i-1 ; j>=0 ; j--){
		arr[j] = ((Copy_u8Number) % 10)+48;
		(Copy_u8Number)= (Copy_u8Number)/10;
	}
	for(j=0 ; j<i ; j++){
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	01 96       	adiw	r24, 0x01	; 1
    180e:	9c 83       	std	Y+4, r25	; 0x04
    1810:	8b 83       	std	Y+3, r24	; 0x03
    1812:	2b 81       	ldd	r18, Y+3	; 0x03
    1814:	3c 81       	ldd	r19, Y+4	; 0x04
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	28 17       	cp	r18, r24
    181c:	39 07       	cpc	r19, r25
    181e:	3c f3       	brlt	.-50     	; 0x17ee <HLCD_U8WriteNumber+0xfa>
		HLCD_U8WriteChar(arr[j]);
	}
	return Local_u8ErrorState;
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	2b 85       	ldd	r18, Y+11	; 0x0b
    1824:	3c 85       	ldd	r19, Y+12	; 0x0c
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	3e bf       	out	0x3e, r19	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	2d bf       	out	0x3d, r18	; 61
}
    1830:	2f 85       	ldd	r18, Y+15	; 0x0f
    1832:	38 89       	ldd	r19, Y+16	; 0x10
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	3e bf       	out	0x3e, r19	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	2d bf       	out	0x3d, r18	; 61
    183e:	60 96       	adiw	r28, 0x10	; 16
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <HultraSonic_viodSendPulse>:
#include "MDIO_Interface.h"
#include "MTMR_Interface.h"
#include "HultraSonic_Interface.h"
#include "HLCD_Interface.h"

void HultraSonic_viodSendPulse(u8 trig_port , u8 trig_pin){
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	6a 97       	sbiw	r28, 0x1a	; 26
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	89 8f       	std	Y+25, r24	; 0x19
    1866:	6a 8f       	std	Y+26, r22	; 0x1a
	MDIO_u8SetPinValue(trig_port,trig_pin,MDIO_U8_HIGH);
    1868:	89 8d       	ldd	r24, Y+25	; 0x19
    186a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a0 e2       	ldi	r26, 0x20	; 32
    1878:	b1 e4       	ldi	r27, 0x41	; 65
    187a:	8d 8b       	std	Y+21, r24	; 0x15
    187c:	9e 8b       	std	Y+22, r25	; 0x16
    187e:	af 8b       	std	Y+23, r26	; 0x17
    1880:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1882:	6d 89       	ldd	r22, Y+21	; 0x15
    1884:	7e 89       	ldd	r23, Y+22	; 0x16
    1886:	8f 89       	ldd	r24, Y+23	; 0x17
    1888:	98 8d       	ldd	r25, Y+24	; 0x18
    188a:	2b ea       	ldi	r18, 0xAB	; 171
    188c:	3a ea       	ldi	r19, 0xAA	; 170
    188e:	4a e2       	ldi	r20, 0x2A	; 42
    1890:	50 e4       	ldi	r21, 0x40	; 64
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	89 8b       	std	Y+17, r24	; 0x11
    189c:	9a 8b       	std	Y+18, r25	; 0x12
    189e:	ab 8b       	std	Y+19, r26	; 0x13
    18a0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    18a2:	69 89       	ldd	r22, Y+17	; 0x11
    18a4:	7a 89       	ldd	r23, Y+18	; 0x12
    18a6:	8b 89       	ldd	r24, Y+19	; 0x13
    18a8:	9c 89       	ldd	r25, Y+20	; 0x14
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	1c f4       	brge	.+6      	; 0x18c0 <HultraSonic_viodSendPulse+0x70>
		__ticks = 1;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	88 8b       	std	Y+16, r24	; 0x10
    18be:	91 c0       	rjmp	.+290    	; 0x19e2 <HultraSonic_viodSendPulse+0x192>
	else if (__tmp > 255)
    18c0:	69 89       	ldd	r22, Y+17	; 0x11
    18c2:	7a 89       	ldd	r23, Y+18	; 0x12
    18c4:	8b 89       	ldd	r24, Y+19	; 0x13
    18c6:	9c 89       	ldd	r25, Y+20	; 0x14
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	4f e7       	ldi	r20, 0x7F	; 127
    18ce:	53 e4       	ldi	r21, 0x43	; 67
    18d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18d4:	18 16       	cp	r1, r24
    18d6:	0c f0       	brlt	.+2      	; 0x18da <HultraSonic_viodSendPulse+0x8a>
    18d8:	7b c0       	rjmp	.+246    	; 0x19d0 <HultraSonic_viodSendPulse+0x180>
	{
		_delay_ms(__us / 1000.0);
    18da:	6d 89       	ldd	r22, Y+21	; 0x15
    18dc:	7e 89       	ldd	r23, Y+22	; 0x16
    18de:	8f 89       	ldd	r24, Y+23	; 0x17
    18e0:	98 8d       	ldd	r25, Y+24	; 0x18
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a e7       	ldi	r20, 0x7A	; 122
    18e8:	54 e4       	ldi	r21, 0x44	; 68
    18ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	8c 87       	std	Y+12, r24	; 0x0c
    18f4:	9d 87       	std	Y+13, r25	; 0x0d
    18f6:	ae 87       	std	Y+14, r26	; 0x0e
    18f8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    18fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    18fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1900:	9f 85       	ldd	r25, Y+15	; 0x0f
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a ef       	ldi	r20, 0xFA	; 250
    1908:	54 e4       	ldi	r21, 0x44	; 68
    190a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	88 87       	std	Y+8, r24	; 0x08
    1914:	99 87       	std	Y+9, r25	; 0x09
    1916:	aa 87       	std	Y+10, r26	; 0x0a
    1918:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    191a:	68 85       	ldd	r22, Y+8	; 0x08
    191c:	79 85       	ldd	r23, Y+9	; 0x09
    191e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1920:	9b 85       	ldd	r25, Y+11	; 0x0b
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    192e:	88 23       	and	r24, r24
    1930:	2c f4       	brge	.+10     	; 0x193c <HultraSonic_viodSendPulse+0xec>
		__ticks = 1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9f 83       	std	Y+7, r25	; 0x07
    1938:	8e 83       	std	Y+6, r24	; 0x06
    193a:	3f c0       	rjmp	.+126    	; 0x19ba <HultraSonic_viodSendPulse+0x16a>
	else if (__tmp > 65535)
    193c:	68 85       	ldd	r22, Y+8	; 0x08
    193e:	79 85       	ldd	r23, Y+9	; 0x09
    1940:	8a 85       	ldd	r24, Y+10	; 0x0a
    1942:	9b 85       	ldd	r25, Y+11	; 0x0b
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	3f ef       	ldi	r19, 0xFF	; 255
    1948:	4f e7       	ldi	r20, 0x7F	; 127
    194a:	57 e4       	ldi	r21, 0x47	; 71
    194c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1950:	18 16       	cp	r1, r24
    1952:	4c f5       	brge	.+82     	; 0x19a6 <HultraSonic_viodSendPulse+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1954:	6c 85       	ldd	r22, Y+12	; 0x0c
    1956:	7d 85       	ldd	r23, Y+13	; 0x0d
    1958:	8e 85       	ldd	r24, Y+14	; 0x0e
    195a:	9f 85       	ldd	r25, Y+15	; 0x0f
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9f 83       	std	Y+7, r25	; 0x07
    197a:	8e 83       	std	Y+6, r24	; 0x06
    197c:	0f c0       	rjmp	.+30     	; 0x199c <HultraSonic_viodSendPulse+0x14c>
    197e:	88 ec       	ldi	r24, 0xC8	; 200
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9d 83       	std	Y+5, r25	; 0x05
    1984:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <HultraSonic_viodSendPulse+0x13a>
    198e:	9d 83       	std	Y+5, r25	; 0x05
    1990:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1992:	8e 81       	ldd	r24, Y+6	; 0x06
    1994:	9f 81       	ldd	r25, Y+7	; 0x07
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	9f 83       	std	Y+7, r25	; 0x07
    199a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199c:	8e 81       	ldd	r24, Y+6	; 0x06
    199e:	9f 81       	ldd	r25, Y+7	; 0x07
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	69 f7       	brne	.-38     	; 0x197e <HultraSonic_viodSendPulse+0x12e>
    19a4:	24 c0       	rjmp	.+72     	; 0x19ee <HultraSonic_viodSendPulse+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a6:	68 85       	ldd	r22, Y+8	; 0x08
    19a8:	79 85       	ldd	r23, Y+9	; 0x09
    19aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    19ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9f 83       	std	Y+7, r25	; 0x07
    19b8:	8e 83       	std	Y+6, r24	; 0x06
    19ba:	8e 81       	ldd	r24, Y+6	; 0x06
    19bc:	9f 81       	ldd	r25, Y+7	; 0x07
    19be:	9b 83       	std	Y+3, r25	; 0x03
    19c0:	8a 83       	std	Y+2, r24	; 0x02
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	9b 81       	ldd	r25, Y+3	; 0x03
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <HultraSonic_viodSendPulse+0x176>
    19ca:	9b 83       	std	Y+3, r25	; 0x03
    19cc:	8a 83       	std	Y+2, r24	; 0x02
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <HultraSonic_viodSendPulse+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19d0:	69 89       	ldd	r22, Y+17	; 0x11
    19d2:	7a 89       	ldd	r23, Y+18	; 0x12
    19d4:	8b 89       	ldd	r24, Y+19	; 0x13
    19d6:	9c 89       	ldd	r25, Y+20	; 0x14
    19d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	88 8b       	std	Y+16, r24	; 0x10
    19e2:	88 89       	ldd	r24, Y+16	; 0x10
    19e4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	8a 95       	dec	r24
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <HultraSonic_viodSendPulse+0x198>
    19ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	MDIO_u8SetPinValue(trig_port,trig_pin,MDIO_U8_LOW);
    19ee:	89 8d       	ldd	r24, Y+25	; 0x19
    19f0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	MTMR_TIMER1_INIT();
    19f8:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <MTMR_TIMER1_INIT>
}
    19fc:	6a 96       	adiw	r28, 0x1a	; 26
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <HultraSonic_voidDisplayDistance>:
void HultraSonic_voidDisplayDistance(u16 Ton){
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <HultraSonic_voidDisplayDistance+0x6>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	HLCD_U8SetCursor(0,0);
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
	HLCD_U8WriteString("Distance:");
    1a24:	80 e6       	ldi	r24, 0x60	; 96
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
	HLCD_U8SetCursor(0,9);HLCD_U8WriteNumber(Ton);
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	69 e0       	ldi	r22, 0x09	; 9
    1a30:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <HLCD_U8WriteNumber>
	if(Ton < 100){
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	84 36       	cpi	r24, 0x64	; 100
    1a42:	91 05       	cpc	r25, r1
    1a44:	40 f4       	brcc	.+16     	; 0x1a56 <HultraSonic_voidDisplayDistance+0x48>
			HLCD_U8SetCursor(0,11);HLCD_U8WriteString(" ");
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	6b e0       	ldi	r22, 0x0B	; 11
    1a4a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
    1a4e:	8a e6       	ldi	r24, 0x6A	; 106
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
		}
	if(Ton < 10){
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5a:	8a 30       	cpi	r24, 0x0A	; 10
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	40 f4       	brcc	.+16     	; 0x1a70 <HultraSonic_voidDisplayDistance+0x62>
		HLCD_U8SetCursor(0,10);HLCD_U8WriteString(" ");
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	6a e0       	ldi	r22, 0x0A	; 10
    1a64:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
    1a68:	8a e6       	ldi	r24, 0x6A	; 106
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
	}
		HLCD_U8SetCursor(0,12);HLCD_U8WriteString("cm");
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	6c e0       	ldi	r22, 0x0C	; 12
    1a74:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
    1a78:	8c e6       	ldi	r24, 0x6C	; 108
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <MDIO_u8SetPinDirection>:
/* MCAL */
#include "MDIO_Interface.h"
#include "MDIO_Private.h"
#include "MDIO_Config.h"
/*Function implementation*/
u8 MDIO_u8SetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinDirection){
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	2c 97       	sbiw	r28, 0x0c	; 12
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
    1aa0:	6b 83       	std	Y+3, r22	; 0x03
    1aa2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState =0;
    1aa4:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PinID <= MDIO_U8_PIN_7) && (Copy_u8PortID <= MDIO_U8_PORTD)){
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	88 30       	cpi	r24, 0x08	; 8
    1aaa:	08 f0       	brcs	.+2      	; 0x1aae <MDIO_u8SetPinDirection+0x24>
    1aac:	be c1       	rjmp	.+892    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	84 30       	cpi	r24, 0x04	; 4
    1ab2:	08 f0       	brcs	.+2      	; 0x1ab6 <MDIO_u8SetPinDirection+0x2c>
    1ab4:	ba c1       	rjmp	.+884    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
		Local_u8ErrorState =1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PinDirection){
    1aba:	8c 81       	ldd	r24, Y+4	; 0x04
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	3c 87       	std	Y+12, r19	; 0x0c
    1ac2:	2b 87       	std	Y+11, r18	; 0x0b
    1ac4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ac6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	91 05       	cpc	r25, r1
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <MDIO_u8SetPinDirection+0x46>
    1ace:	7a c0       	rjmp	.+244    	; 0x1bc4 <MDIO_u8SetPinDirection+0x13a>
    1ad0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ad2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ad4:	22 30       	cpi	r18, 0x02	; 2
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <MDIO_u8SetPinDirection+0x52>
    1ada:	32 c1       	rjmp	.+612    	; 0x1d40 <MDIO_u8SetPinDirection+0x2b6>
    1adc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ade:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <MDIO_u8SetPinDirection+0x5c>
    1ae4:	a1 c1       	rjmp	.+834    	; 0x1e28 <MDIO_u8SetPinDirection+0x39e>
		case(MDIO_U8_OUTPUT):
			switch(Copy_u8PortID){
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	3a 87       	std	Y+10, r19	; 0x0a
    1aee:	29 87       	std	Y+9, r18	; 0x09
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	91 05       	cpc	r25, r1
    1af8:	49 f1       	breq	.+82     	; 0x1b4c <MDIO_u8SetPinDirection+0xc2>
    1afa:	29 85       	ldd	r18, Y+9	; 0x09
    1afc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1afe:	22 30       	cpi	r18, 0x02	; 2
    1b00:	31 05       	cpc	r19, r1
    1b02:	2c f4       	brge	.+10     	; 0x1b0e <MDIO_u8SetPinDirection+0x84>
    1b04:	89 85       	ldd	r24, Y+9	; 0x09
    1b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	61 f0       	breq	.+24     	; 0x1b24 <MDIO_u8SetPinDirection+0x9a>
    1b0c:	8e c1       	rjmp	.+796    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
    1b0e:	29 85       	ldd	r18, Y+9	; 0x09
    1b10:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b12:	22 30       	cpi	r18, 0x02	; 2
    1b14:	31 05       	cpc	r19, r1
    1b16:	71 f1       	breq	.+92     	; 0x1b74 <MDIO_u8SetPinDirection+0xea>
    1b18:	89 85       	ldd	r24, Y+9	; 0x09
    1b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1c:	83 30       	cpi	r24, 0x03	; 3
    1b1e:	91 05       	cpc	r25, r1
    1b20:	e9 f1       	breq	.+122    	; 0x1b9c <MDIO_u8SetPinDirection+0x112>
    1b22:	83 c1       	rjmp	.+774    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTA):SET_BIT(MDIO_U8_DDRA,Copy_u8PinID);break;
    1b24:	aa e3       	ldi	r26, 0x3A	; 58
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	ea e3       	ldi	r30, 0x3A	; 58
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	48 2f       	mov	r20, r24
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	02 2e       	mov	r0, r18
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <MDIO_u8SetPinDirection+0xb8>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	0a 94       	dec	r0
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <MDIO_u8SetPinDirection+0xb4>
    1b46:	84 2b       	or	r24, r20
    1b48:	8c 93       	st	X, r24
    1b4a:	6f c1       	rjmp	.+734    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTB):SET_BIT(MDIO_U8_DDRB,Copy_u8PinID);break;
    1b4c:	a7 e3       	ldi	r26, 0x37	; 55
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e7 e3       	ldi	r30, 0x37	; 55
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	48 2f       	mov	r20, r24
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	02 2e       	mov	r0, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <MDIO_u8SetPinDirection+0xe0>
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	0a 94       	dec	r0
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <MDIO_u8SetPinDirection+0xdc>
    1b6e:	84 2b       	or	r24, r20
    1b70:	8c 93       	st	X, r24
    1b72:	5b c1       	rjmp	.+694    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTC):SET_BIT(MDIO_U8_DDRC,Copy_u8PinID);break;
    1b74:	a4 e3       	ldi	r26, 0x34	; 52
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e4 e3       	ldi	r30, 0x34	; 52
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	48 2f       	mov	r20, r24
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	02 2e       	mov	r0, r18
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <MDIO_u8SetPinDirection+0x108>
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	0a 94       	dec	r0
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <MDIO_u8SetPinDirection+0x104>
    1b96:	84 2b       	or	r24, r20
    1b98:	8c 93       	st	X, r24
    1b9a:	47 c1       	rjmp	.+654    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTD):SET_BIT(MDIO_U8_DDRD,Copy_u8PinID);break;
    1b9c:	a1 e3       	ldi	r26, 0x31	; 49
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e1 e3       	ldi	r30, 0x31	; 49
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	02 2e       	mov	r0, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <MDIO_u8SetPinDirection+0x130>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	0a 94       	dec	r0
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <MDIO_u8SetPinDirection+0x12c>
    1bbe:	84 2b       	or	r24, r20
    1bc0:	8c 93       	st	X, r24
    1bc2:	33 c1       	rjmp	.+614    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			}break;
		case(MDIO_U8_INPUT_PULLED_UP):
			switch(Copy_u8PortID){
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	38 87       	std	Y+8, r19	; 0x08
    1bcc:	2f 83       	std	Y+7, r18	; 0x07
    1bce:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd0:	98 85       	ldd	r25, Y+8	; 0x08
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <MDIO_u8SetPinDirection+0x150>
    1bd8:	3e c0       	rjmp	.+124    	; 0x1c56 <MDIO_u8SetPinDirection+0x1cc>
    1bda:	2f 81       	ldd	r18, Y+7	; 0x07
    1bdc:	38 85       	ldd	r19, Y+8	; 0x08
    1bde:	22 30       	cpi	r18, 0x02	; 2
    1be0:	31 05       	cpc	r19, r1
    1be2:	2c f4       	brge	.+10     	; 0x1bee <MDIO_u8SetPinDirection+0x164>
    1be4:	8f 81       	ldd	r24, Y+7	; 0x07
    1be6:	98 85       	ldd	r25, Y+8	; 0x08
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	71 f0       	breq	.+28     	; 0x1c08 <MDIO_u8SetPinDirection+0x17e>
    1bec:	1e c1       	rjmp	.+572    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
    1bee:	2f 81       	ldd	r18, Y+7	; 0x07
    1bf0:	38 85       	ldd	r19, Y+8	; 0x08
    1bf2:	22 30       	cpi	r18, 0x02	; 2
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <MDIO_u8SetPinDirection+0x170>
    1bf8:	55 c0       	rjmp	.+170    	; 0x1ca4 <MDIO_u8SetPinDirection+0x21a>
    1bfa:	8f 81       	ldd	r24, Y+7	; 0x07
    1bfc:	98 85       	ldd	r25, Y+8	; 0x08
    1bfe:	83 30       	cpi	r24, 0x03	; 3
    1c00:	91 05       	cpc	r25, r1
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <MDIO_u8SetPinDirection+0x17c>
    1c04:	76 c0       	rjmp	.+236    	; 0x1cf2 <MDIO_u8SetPinDirection+0x268>
    1c06:	11 c1       	rjmp	.+546    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTA):CLEAR_BIT(MDIO_U8_DDRA,Copy_u8PinID);SET_BIT(MDIO_U8_PORTA_REG,Copy_u8PinID);break;
    1c08:	aa e3       	ldi	r26, 0x3A	; 58
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	ea e3       	ldi	r30, 0x3A	; 58
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <MDIO_u8SetPinDirection+0x19a>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	2a 95       	dec	r18
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <MDIO_u8SetPinDirection+0x196>
    1c28:	80 95       	com	r24
    1c2a:	84 23       	and	r24, r20
    1c2c:	8c 93       	st	X, r24
    1c2e:	ab e3       	ldi	r26, 0x3B	; 59
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	eb e3       	ldi	r30, 0x3B	; 59
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <MDIO_u8SetPinDirection+0x1c2>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <MDIO_u8SetPinDirection+0x1be>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	ea c0       	rjmp	.+468    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTB):CLEAR_BIT(MDIO_U8_DDRB,Copy_u8PinID);SET_BIT(MDIO_U8_PORTB_REG,Copy_u8PinID);break;
    1c56:	a7 e3       	ldi	r26, 0x37	; 55
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e7 e3       	ldi	r30, 0x37	; 55
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <MDIO_u8SetPinDirection+0x1e8>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	2a 95       	dec	r18
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <MDIO_u8SetPinDirection+0x1e4>
    1c76:	80 95       	com	r24
    1c78:	84 23       	and	r24, r20
    1c7a:	8c 93       	st	X, r24
    1c7c:	a8 e3       	ldi	r26, 0x38	; 56
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e8 e3       	ldi	r30, 0x38	; 56
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 2e       	mov	r0, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <MDIO_u8SetPinDirection+0x210>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <MDIO_u8SetPinDirection+0x20c>
    1c9e:	84 2b       	or	r24, r20
    1ca0:	8c 93       	st	X, r24
    1ca2:	c3 c0       	rjmp	.+390    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTC):CLEAR_BIT(MDIO_U8_DDRC,Copy_u8PinID);SET_BIT(MDIO_U8_PORTC_REG,Copy_u8PinID);break;
    1ca4:	a4 e3       	ldi	r26, 0x34	; 52
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e4 e3       	ldi	r30, 0x34	; 52
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	48 2f       	mov	r20, r24
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <MDIO_u8SetPinDirection+0x236>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	2a 95       	dec	r18
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <MDIO_u8SetPinDirection+0x232>
    1cc4:	80 95       	com	r24
    1cc6:	84 23       	and	r24, r20
    1cc8:	8c 93       	st	X, r24
    1cca:	a5 e3       	ldi	r26, 0x35	; 53
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e5 e3       	ldi	r30, 0x35	; 53
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	48 2f       	mov	r20, r24
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 2e       	mov	r0, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <MDIO_u8SetPinDirection+0x25e>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	0a 94       	dec	r0
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <MDIO_u8SetPinDirection+0x25a>
    1cec:	84 2b       	or	r24, r20
    1cee:	8c 93       	st	X, r24
    1cf0:	9c c0       	rjmp	.+312    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTD):CLEAR_BIT(MDIO_U8_DDRD,Copy_u8PinID);SET_BIT(MDIO_U8_PORTD_REG,Copy_u8PinID);break;
    1cf2:	a1 e3       	ldi	r26, 0x31	; 49
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e1 e3       	ldi	r30, 0x31	; 49
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <MDIO_u8SetPinDirection+0x284>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	2a 95       	dec	r18
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <MDIO_u8SetPinDirection+0x280>
    1d12:	80 95       	com	r24
    1d14:	84 23       	and	r24, r20
    1d16:	8c 93       	st	X, r24
    1d18:	a2 e3       	ldi	r26, 0x32	; 50
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e2 e3       	ldi	r30, 0x32	; 50
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 2e       	mov	r0, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <MDIO_u8SetPinDirection+0x2ac>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <MDIO_u8SetPinDirection+0x2a8>
    1d3a:	84 2b       	or	r24, r20
    1d3c:	8c 93       	st	X, r24
    1d3e:	75 c0       	rjmp	.+234    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			}break;
		case(MDIO_U8_INPUT_FLOATING):
			switch(Copy_u8PortID){
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	3e 83       	std	Y+6, r19	; 0x06
    1d48:	2d 83       	std	Y+5, r18	; 0x05
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	81 30       	cpi	r24, 0x01	; 1
    1d50:	91 05       	cpc	r25, r1
    1d52:	59 f1       	breq	.+86     	; 0x1daa <MDIO_u8SetPinDirection+0x320>
    1d54:	2d 81       	ldd	r18, Y+5	; 0x05
    1d56:	3e 81       	ldd	r19, Y+6	; 0x06
    1d58:	22 30       	cpi	r18, 0x02	; 2
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <MDIO_u8SetPinDirection+0x2de>
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f0       	breq	.+26     	; 0x1d80 <MDIO_u8SetPinDirection+0x2f6>
    1d66:	61 c0       	rjmp	.+194    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
    1d68:	2d 81       	ldd	r18, Y+5	; 0x05
    1d6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	89 f1       	breq	.+98     	; 0x1dd4 <MDIO_u8SetPinDirection+0x34a>
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	83 30       	cpi	r24, 0x03	; 3
    1d78:	91 05       	cpc	r25, r1
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <MDIO_u8SetPinDirection+0x2f4>
    1d7c:	40 c0       	rjmp	.+128    	; 0x1dfe <MDIO_u8SetPinDirection+0x374>
    1d7e:	55 c0       	rjmp	.+170    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTA):CLEAR_BIT(MDIO_U8_DDRA,Copy_u8PinID);break;
    1d80:	aa e3       	ldi	r26, 0x3A	; 58
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	ea e3       	ldi	r30, 0x3A	; 58
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <MDIO_u8SetPinDirection+0x314>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <MDIO_u8SetPinDirection+0x310>
    1da2:	80 95       	com	r24
    1da4:	84 23       	and	r24, r20
    1da6:	8c 93       	st	X, r24
    1da8:	40 c0       	rjmp	.+128    	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTB):CLEAR_BIT(MDIO_U8_DDRB,Copy_u8PinID);break;
    1daa:	a7 e3       	ldi	r26, 0x37	; 55
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e7 e3       	ldi	r30, 0x37	; 55
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	48 2f       	mov	r20, r24
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	02 2e       	mov	r0, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <MDIO_u8SetPinDirection+0x33e>
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	0a 94       	dec	r0
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <MDIO_u8SetPinDirection+0x33a>
    1dcc:	80 95       	com	r24
    1dce:	84 23       	and	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	2b c0       	rjmp	.+86     	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTC):CLEAR_BIT(MDIO_U8_DDRC,Copy_u8PinID);break;
    1dd4:	a4 e3       	ldi	r26, 0x34	; 52
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e4 e3       	ldi	r30, 0x34	; 52
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 2e       	mov	r0, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <MDIO_u8SetPinDirection+0x368>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	0a 94       	dec	r0
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <MDIO_u8SetPinDirection+0x364>
    1df6:	80 95       	com	r24
    1df8:	84 23       	and	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	16 c0       	rjmp	.+44     	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTD):CLEAR_BIT(MDIO_U8_DDRD,Copy_u8PinID);break;
    1dfe:	a1 e3       	ldi	r26, 0x31	; 49
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e1 e3       	ldi	r30, 0x31	; 49
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 2e       	mov	r0, r18
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <MDIO_u8SetPinDirection+0x392>
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	0a 94       	dec	r0
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <MDIO_u8SetPinDirection+0x38e>
    1e20:	80 95       	com	r24
    1e22:	84 23       	and	r24, r20
    1e24:	8c 93       	st	X, r24
    1e26:	01 c0       	rjmp	.+2      	; 0x1e2a <MDIO_u8SetPinDirection+0x3a0>
			}break;
		default:Local_u8ErrorState=STD_TYPES_NOK;
    1e28:	19 82       	std	Y+1, r1	; 0x01
		}

	}
	return Local_u8ErrorState;
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2c:	2c 96       	adiw	r28, 0x0c	; 12
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <MDIO_u8SetPinValue>:
u8 MDIO_u8SetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue){
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	2a 97       	sbiw	r28, 0x0a	; 10
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	8a 83       	std	Y+2, r24	; 0x02
    1e54:	6b 83       	std	Y+3, r22	; 0x03
    1e56:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState;
	if((Copy_u8PinID <= MDIO_U8_PIN_7) && (Copy_u8PortID <= MDIO_U8_PORTD)){
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	88 30       	cpi	r24, 0x08	; 8
    1e5c:	08 f0       	brcs	.+2      	; 0x1e60 <MDIO_u8SetPinValue+0x22>
    1e5e:	fa c0       	rjmp	.+500    	; 0x2054 <MDIO_u8SetPinValue+0x216>
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	84 30       	cpi	r24, 0x04	; 4
    1e64:	08 f0       	brcs	.+2      	; 0x1e68 <MDIO_u8SetPinValue+0x2a>
    1e66:	f6 c0       	rjmp	.+492    	; 0x2054 <MDIO_u8SetPinValue+0x216>
		Local_u8ErrorState = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PinValue){
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	3a 87       	std	Y+10, r19	; 0x0a
    1e74:	29 87       	std	Y+9, r18	; 0x09
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <MDIO_u8SetPinValue+0x42>
    1e7e:	75 c0       	rjmp	.+234    	; 0x1f6a <MDIO_u8SetPinValue+0x12c>
    1e80:	29 85       	ldd	r18, Y+9	; 0x09
    1e82:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e84:	21 30       	cpi	r18, 0x01	; 1
    1e86:	31 05       	cpc	r19, r1
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <MDIO_u8SetPinValue+0x4e>
    1e8a:	e3 c0       	rjmp	.+454    	; 0x2052 <MDIO_u8SetPinValue+0x214>
		case(MDIO_U8_HIGH):
			switch(Copy_u8PortID){
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	38 87       	std	Y+8, r19	; 0x08
    1e94:	2f 83       	std	Y+7, r18	; 0x07
    1e96:	8f 81       	ldd	r24, Y+7	; 0x07
    1e98:	98 85       	ldd	r25, Y+8	; 0x08
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	49 f1       	breq	.+82     	; 0x1ef2 <MDIO_u8SetPinValue+0xb4>
    1ea0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ea2:	38 85       	ldd	r19, Y+8	; 0x08
    1ea4:	22 30       	cpi	r18, 0x02	; 2
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <MDIO_u8SetPinValue+0x76>
    1eaa:	8f 81       	ldd	r24, Y+7	; 0x07
    1eac:	98 85       	ldd	r25, Y+8	; 0x08
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	61 f0       	breq	.+24     	; 0x1eca <MDIO_u8SetPinValue+0x8c>
    1eb2:	d0 c0       	rjmp	.+416    	; 0x2054 <MDIO_u8SetPinValue+0x216>
    1eb4:	2f 81       	ldd	r18, Y+7	; 0x07
    1eb6:	38 85       	ldd	r19, Y+8	; 0x08
    1eb8:	22 30       	cpi	r18, 0x02	; 2
    1eba:	31 05       	cpc	r19, r1
    1ebc:	71 f1       	breq	.+92     	; 0x1f1a <MDIO_u8SetPinValue+0xdc>
    1ebe:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec0:	98 85       	ldd	r25, Y+8	; 0x08
    1ec2:	83 30       	cpi	r24, 0x03	; 3
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	e9 f1       	breq	.+122    	; 0x1f42 <MDIO_u8SetPinValue+0x104>
    1ec8:	c5 c0       	rjmp	.+394    	; 0x2054 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTA):SET_BIT(MDIO_U8_PORTA_REG,Copy_u8PinID);break;
    1eca:	ab e3       	ldi	r26, 0x3B	; 59
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	eb e3       	ldi	r30, 0x3B	; 59
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	48 2f       	mov	r20, r24
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	02 2e       	mov	r0, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <MDIO_u8SetPinValue+0xaa>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	0a 94       	dec	r0
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <MDIO_u8SetPinValue+0xa6>
    1eec:	84 2b       	or	r24, r20
    1eee:	8c 93       	st	X, r24
    1ef0:	b1 c0       	rjmp	.+354    	; 0x2054 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTB):SET_BIT(MDIO_U8_PORTB_REG,Copy_u8PinID);break;
    1ef2:	a8 e3       	ldi	r26, 0x38	; 56
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e8 e3       	ldi	r30, 0x38	; 56
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	48 2f       	mov	r20, r24
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	02 2e       	mov	r0, r18
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <MDIO_u8SetPinValue+0xd2>
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	0a 94       	dec	r0
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <MDIO_u8SetPinValue+0xce>
    1f14:	84 2b       	or	r24, r20
    1f16:	8c 93       	st	X, r24
    1f18:	9d c0       	rjmp	.+314    	; 0x2054 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTC):SET_BIT(MDIO_U8_PORTC_REG,Copy_u8PinID);break;
    1f1a:	a5 e3       	ldi	r26, 0x35	; 53
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e5 e3       	ldi	r30, 0x35	; 53
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	48 2f       	mov	r20, r24
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	02 2e       	mov	r0, r18
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <MDIO_u8SetPinValue+0xfa>
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	0a 94       	dec	r0
    1f3a:	e2 f7       	brpl	.-8      	; 0x1f34 <MDIO_u8SetPinValue+0xf6>
    1f3c:	84 2b       	or	r24, r20
    1f3e:	8c 93       	st	X, r24
    1f40:	89 c0       	rjmp	.+274    	; 0x2054 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTD):SET_BIT(MDIO_U8_PORTD_REG,Copy_u8PinID);break;
    1f42:	a2 e3       	ldi	r26, 0x32	; 50
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e2 e3       	ldi	r30, 0x32	; 50
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	48 2f       	mov	r20, r24
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	02 2e       	mov	r0, r18
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <MDIO_u8SetPinValue+0x122>
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	0a 94       	dec	r0
    1f62:	e2 f7       	brpl	.-8      	; 0x1f5c <MDIO_u8SetPinValue+0x11e>
    1f64:	84 2b       	or	r24, r20
    1f66:	8c 93       	st	X, r24
    1f68:	75 c0       	rjmp	.+234    	; 0x2054 <MDIO_u8SetPinValue+0x216>
			}
			break;
		case(MDIO_U8_LOW):
			switch(Copy_u8PortID){
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	3e 83       	std	Y+6, r19	; 0x06
    1f72:	2d 83       	std	Y+5, r18	; 0x05
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	59 f1       	breq	.+86     	; 0x1fd4 <MDIO_u8SetPinValue+0x196>
    1f7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f80:	3e 81       	ldd	r19, Y+6	; 0x06
    1f82:	22 30       	cpi	r18, 0x02	; 2
    1f84:	31 05       	cpc	r19, r1
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <MDIO_u8SetPinValue+0x154>
    1f88:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	69 f0       	breq	.+26     	; 0x1faa <MDIO_u8SetPinValue+0x16c>
    1f90:	61 c0       	rjmp	.+194    	; 0x2054 <MDIO_u8SetPinValue+0x216>
    1f92:	2d 81       	ldd	r18, Y+5	; 0x05
    1f94:	3e 81       	ldd	r19, Y+6	; 0x06
    1f96:	22 30       	cpi	r18, 0x02	; 2
    1f98:	31 05       	cpc	r19, r1
    1f9a:	89 f1       	breq	.+98     	; 0x1ffe <MDIO_u8SetPinValue+0x1c0>
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	83 30       	cpi	r24, 0x03	; 3
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <MDIO_u8SetPinValue+0x16a>
    1fa6:	40 c0       	rjmp	.+128    	; 0x2028 <MDIO_u8SetPinValue+0x1ea>
    1fa8:	55 c0       	rjmp	.+170    	; 0x2054 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTA):CLEAR_BIT(MDIO_U8_PORTA_REG,Copy_u8PinID);break;
    1faa:	ab e3       	ldi	r26, 0x3B	; 59
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	eb e3       	ldi	r30, 0x3B	; 59
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	48 2f       	mov	r20, r24
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	02 2e       	mov	r0, r18
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <MDIO_u8SetPinValue+0x18a>
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	0a 94       	dec	r0
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <MDIO_u8SetPinValue+0x186>
    1fcc:	80 95       	com	r24
    1fce:	84 23       	and	r24, r20
    1fd0:	8c 93       	st	X, r24
    1fd2:	40 c0       	rjmp	.+128    	; 0x2054 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTB):CLEAR_BIT(MDIO_U8_PORTB_REG,Copy_u8PinID);break;
    1fd4:	a8 e3       	ldi	r26, 0x38	; 56
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e8 e3       	ldi	r30, 0x38	; 56
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	48 2f       	mov	r20, r24
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	02 2e       	mov	r0, r18
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <MDIO_u8SetPinValue+0x1b4>
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	0a 94       	dec	r0
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <MDIO_u8SetPinValue+0x1b0>
    1ff6:	80 95       	com	r24
    1ff8:	84 23       	and	r24, r20
    1ffa:	8c 93       	st	X, r24
    1ffc:	2b c0       	rjmp	.+86     	; 0x2054 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTC):CLEAR_BIT(MDIO_U8_PORTC_REG,Copy_u8PinID);break;
    1ffe:	a5 e3       	ldi	r26, 0x35	; 53
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e5 e3       	ldi	r30, 0x35	; 53
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	48 2f       	mov	r20, r24
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	02 2e       	mov	r0, r18
    2016:	02 c0       	rjmp	.+4      	; 0x201c <MDIO_u8SetPinValue+0x1de>
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	0a 94       	dec	r0
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <MDIO_u8SetPinValue+0x1da>
    2020:	80 95       	com	r24
    2022:	84 23       	and	r24, r20
    2024:	8c 93       	st	X, r24
    2026:	16 c0       	rjmp	.+44     	; 0x2054 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTD):CLEAR_BIT(MDIO_U8_PORTD_REG,Copy_u8PinID);break;
    2028:	a2 e3       	ldi	r26, 0x32	; 50
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e2 e3       	ldi	r30, 0x32	; 50
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	48 2f       	mov	r20, r24
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	02 2e       	mov	r0, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <MDIO_u8SetPinValue+0x208>
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	0a 94       	dec	r0
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <MDIO_u8SetPinValue+0x204>
    204a:	80 95       	com	r24
    204c:	84 23       	and	r24, r20
    204e:	8c 93       	st	X, r24
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <MDIO_u8SetPinValue+0x216>
			}
			break;
		default:Local_u8ErrorState=STD_TYPES_NOK;
    2052:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    2054:	89 81       	ldd	r24, Y+1	; 0x01
}
    2056:	2a 96       	adiw	r28, 0x0a	; 10
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_Pu8PinValue){
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	27 97       	sbiw	r28, 0x07	; 7
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	8a 83       	std	Y+2, r24	; 0x02
    207e:	6b 83       	std	Y+3, r22	; 0x03
    2080:	5d 83       	std	Y+5, r21	; 0x05
    2082:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState;
	if((Copy_u8PinID <= MDIO_U8_PIN_7) && (Copy_u8PortID <= MDIO_U8_PORTD) && (Copy_Pu8PinValue != STD_TYPE_NULL)){
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	88 30       	cpi	r24, 0x08	; 8
    2088:	08 f0       	brcs	.+2      	; 0x208c <MDIO_u8GetPinValue+0x24>
    208a:	7b c0       	rjmp	.+246    	; 0x2182 <MDIO_u8GetPinValue+0x11a>
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	84 30       	cpi	r24, 0x04	; 4
    2090:	08 f0       	brcs	.+2      	; 0x2094 <MDIO_u8GetPinValue+0x2c>
    2092:	77 c0       	rjmp	.+238    	; 0x2182 <MDIO_u8GetPinValue+0x11a>
    2094:	8c 81       	ldd	r24, Y+4	; 0x04
    2096:	9d 81       	ldd	r25, Y+5	; 0x05
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	09 f4       	brne	.+2      	; 0x209e <MDIO_u8GetPinValue+0x36>
    209c:	72 c0       	rjmp	.+228    	; 0x2182 <MDIO_u8GetPinValue+0x11a>
		Local_u8ErrorState = 1;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortID){
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	3f 83       	std	Y+7, r19	; 0x07
    20aa:	2e 83       	std	Y+6, r18	; 0x06
    20ac:	4e 81       	ldd	r20, Y+6	; 0x06
    20ae:	5f 81       	ldd	r21, Y+7	; 0x07
    20b0:	41 30       	cpi	r20, 0x01	; 1
    20b2:	51 05       	cpc	r21, r1
    20b4:	59 f1       	breq	.+86     	; 0x210c <MDIO_u8GetPinValue+0xa4>
    20b6:	8e 81       	ldd	r24, Y+6	; 0x06
    20b8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ba:	82 30       	cpi	r24, 0x02	; 2
    20bc:	91 05       	cpc	r25, r1
    20be:	34 f4       	brge	.+12     	; 0x20cc <MDIO_u8GetPinValue+0x64>
    20c0:	2e 81       	ldd	r18, Y+6	; 0x06
    20c2:	3f 81       	ldd	r19, Y+7	; 0x07
    20c4:	21 15       	cp	r18, r1
    20c6:	31 05       	cpc	r19, r1
    20c8:	69 f0       	breq	.+26     	; 0x20e4 <MDIO_u8GetPinValue+0x7c>
    20ca:	5b c0       	rjmp	.+182    	; 0x2182 <MDIO_u8GetPinValue+0x11a>
    20cc:	4e 81       	ldd	r20, Y+6	; 0x06
    20ce:	5f 81       	ldd	r21, Y+7	; 0x07
    20d0:	42 30       	cpi	r20, 0x02	; 2
    20d2:	51 05       	cpc	r21, r1
    20d4:	79 f1       	breq	.+94     	; 0x2134 <MDIO_u8GetPinValue+0xcc>
    20d6:	8e 81       	ldd	r24, Y+6	; 0x06
    20d8:	9f 81       	ldd	r25, Y+7	; 0x07
    20da:	83 30       	cpi	r24, 0x03	; 3
    20dc:	91 05       	cpc	r25, r1
    20de:	09 f4       	brne	.+2      	; 0x20e2 <MDIO_u8GetPinValue+0x7a>
    20e0:	3d c0       	rjmp	.+122    	; 0x215c <MDIO_u8GetPinValue+0xf4>
    20e2:	4f c0       	rjmp	.+158    	; 0x2182 <MDIO_u8GetPinValue+0x11a>
		case(MDIO_U8_PORTA):(* Copy_Pu8PinValue )= GET_BIT(MDIO_U8_PINA,Copy_u8PinID);break;
    20e4:	e9 e3       	ldi	r30, 0x39	; 57
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a9 01       	movw	r20, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <MDIO_u8GetPinValue+0x94>
    20f8:	55 95       	asr	r21
    20fa:	47 95       	ror	r20
    20fc:	8a 95       	dec	r24
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <MDIO_u8GetPinValue+0x90>
    2100:	ca 01       	movw	r24, r20
    2102:	81 70       	andi	r24, 0x01	; 1
    2104:	ec 81       	ldd	r30, Y+4	; 0x04
    2106:	fd 81       	ldd	r31, Y+5	; 0x05
    2108:	80 83       	st	Z, r24
    210a:	3b c0       	rjmp	.+118    	; 0x2182 <MDIO_u8GetPinValue+0x11a>
		case(MDIO_U8_PORTB):(* Copy_Pu8PinValue )= GET_BIT(MDIO_U8_PINB,Copy_u8PinID);break;
    210c:	e6 e3       	ldi	r30, 0x36	; 54
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	88 2f       	mov	r24, r24
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a9 01       	movw	r20, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <MDIO_u8GetPinValue+0xbc>
    2120:	55 95       	asr	r21
    2122:	47 95       	ror	r20
    2124:	8a 95       	dec	r24
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <MDIO_u8GetPinValue+0xb8>
    2128:	ca 01       	movw	r24, r20
    212a:	81 70       	andi	r24, 0x01	; 1
    212c:	ec 81       	ldd	r30, Y+4	; 0x04
    212e:	fd 81       	ldd	r31, Y+5	; 0x05
    2130:	80 83       	st	Z, r24
    2132:	27 c0       	rjmp	.+78     	; 0x2182 <MDIO_u8GetPinValue+0x11a>
		case(MDIO_U8_PORTC):(* Copy_Pu8PinValue )= GET_BIT(MDIO_U8_PINC,Copy_u8PinID);break;
    2134:	e3 e3       	ldi	r30, 0x33	; 51
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	88 2f       	mov	r24, r24
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	a9 01       	movw	r20, r18
    2146:	02 c0       	rjmp	.+4      	; 0x214c <MDIO_u8GetPinValue+0xe4>
    2148:	55 95       	asr	r21
    214a:	47 95       	ror	r20
    214c:	8a 95       	dec	r24
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <MDIO_u8GetPinValue+0xe0>
    2150:	ca 01       	movw	r24, r20
    2152:	81 70       	andi	r24, 0x01	; 1
    2154:	ec 81       	ldd	r30, Y+4	; 0x04
    2156:	fd 81       	ldd	r31, Y+5	; 0x05
    2158:	80 83       	st	Z, r24
    215a:	13 c0       	rjmp	.+38     	; 0x2182 <MDIO_u8GetPinValue+0x11a>
		case(MDIO_U8_PORTD):(* Copy_Pu8PinValue )= GET_BIT(MDIO_U8_PIND,Copy_u8PinID);break;
    215c:	e0 e3       	ldi	r30, 0x30	; 48
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	88 2f       	mov	r24, r24
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	a9 01       	movw	r20, r18
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <MDIO_u8GetPinValue+0x10c>
    2170:	55 95       	asr	r21
    2172:	47 95       	ror	r20
    2174:	8a 95       	dec	r24
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <MDIO_u8GetPinValue+0x108>
    2178:	ca 01       	movw	r24, r20
    217a:	81 70       	andi	r24, 0x01	; 1
    217c:	ec 81       	ldd	r30, Y+4	; 0x04
    217e:	fd 81       	ldd	r31, Y+5	; 0x05
    2180:	80 83       	st	Z, r24
		}
	}
	return Local_u8ErrorState;
    2182:	89 81       	ldd	r24, Y+1	; 0x01
}
    2184:	27 96       	adiw	r28, 0x07	; 7
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <MDIO_u8GetPortDirection>:
u8 MDIO_u8GetPortDirection(u8 Copy_u8PortID ,  u8 Copy_u8PortDirection){
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	2b 97       	sbiw	r28, 0x0b	; 11
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	8a 83       	std	Y+2, r24	; 0x02
    21ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    21ae:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= MDIO_U8_PORTD){
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	84 30       	cpi	r24, 0x04	; 4
    21b4:	08 f0       	brcs	.+2      	; 0x21b8 <MDIO_u8GetPortDirection+0x22>
    21b6:	b9 c0       	rjmp	.+370    	; 0x232a <MDIO_u8GetPortDirection+0x194>
		Local_u8ErrorState = STD_TYPES_OK;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortDirection){
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	3b 87       	std	Y+11, r19	; 0x0b
    21c4:	2a 87       	std	Y+10, r18	; 0x0a
    21c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	91 05       	cpc	r25, r1
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <MDIO_u8GetPortDirection+0x3c>
    21d0:	6c c0       	rjmp	.+216    	; 0x22aa <MDIO_u8GetPortDirection+0x114>
    21d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    21d4:	3b 85       	ldd	r19, Y+11	; 0x0b
    21d6:	22 30       	cpi	r18, 0x02	; 2
    21d8:	31 05       	cpc	r19, r1
    21da:	c1 f1       	breq	.+112    	; 0x224c <MDIO_u8GetPortDirection+0xb6>
    21dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    21de:	9b 85       	ldd	r25, Y+11	; 0x0b
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <MDIO_u8GetPortDirection+0x50>
    21e4:	a1 c0       	rjmp	.+322    	; 0x2328 <MDIO_u8GetPortDirection+0x192>
		case(MDIO_U8_OUTPUT):
			switch(Copy_u8PortID){
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	39 87       	std	Y+9, r19	; 0x09
    21ee:	28 87       	std	Y+8, r18	; 0x08
    21f0:	88 85       	ldd	r24, Y+8	; 0x08
    21f2:	99 85       	ldd	r25, Y+9	; 0x09
    21f4:	81 30       	cpi	r24, 0x01	; 1
    21f6:	91 05       	cpc	r25, r1
    21f8:	d1 f0       	breq	.+52     	; 0x222e <MDIO_u8GetPortDirection+0x98>
    21fa:	28 85       	ldd	r18, Y+8	; 0x08
    21fc:	39 85       	ldd	r19, Y+9	; 0x09
    21fe:	22 30       	cpi	r18, 0x02	; 2
    2200:	31 05       	cpc	r19, r1
    2202:	2c f4       	brge	.+10     	; 0x220e <MDIO_u8GetPortDirection+0x78>
    2204:	88 85       	ldd	r24, Y+8	; 0x08
    2206:	99 85       	ldd	r25, Y+9	; 0x09
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	61 f0       	breq	.+24     	; 0x2224 <MDIO_u8GetPortDirection+0x8e>
    220c:	8e c0       	rjmp	.+284    	; 0x232a <MDIO_u8GetPortDirection+0x194>
    220e:	28 85       	ldd	r18, Y+8	; 0x08
    2210:	39 85       	ldd	r19, Y+9	; 0x09
    2212:	22 30       	cpi	r18, 0x02	; 2
    2214:	31 05       	cpc	r19, r1
    2216:	81 f0       	breq	.+32     	; 0x2238 <MDIO_u8GetPortDirection+0xa2>
    2218:	88 85       	ldd	r24, Y+8	; 0x08
    221a:	99 85       	ldd	r25, Y+9	; 0x09
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	91 05       	cpc	r25, r1
    2220:	81 f0       	breq	.+32     	; 0x2242 <MDIO_u8GetPortDirection+0xac>
    2222:	83 c0       	rjmp	.+262    	; 0x232a <MDIO_u8GetPortDirection+0x194>
			case(MDIO_U8_PORTA):MDIO_U8_DDRA = 0xFF;break;
    2224:	ea e3       	ldi	r30, 0x3A	; 58
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	8f ef       	ldi	r24, 0xFF	; 255
    222a:	80 83       	st	Z, r24
    222c:	7e c0       	rjmp	.+252    	; 0x232a <MDIO_u8GetPortDirection+0x194>
			case(MDIO_U8_PORTB):MDIO_U8_DDRB = 0xFF;break;
    222e:	e7 e3       	ldi	r30, 0x37	; 55
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	8f ef       	ldi	r24, 0xFF	; 255
    2234:	80 83       	st	Z, r24
    2236:	79 c0       	rjmp	.+242    	; 0x232a <MDIO_u8GetPortDirection+0x194>
			case(MDIO_U8_PORTC):MDIO_U8_DDRC = 0xFF;break;
    2238:	e4 e3       	ldi	r30, 0x34	; 52
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	8f ef       	ldi	r24, 0xFF	; 255
    223e:	80 83       	st	Z, r24
    2240:	74 c0       	rjmp	.+232    	; 0x232a <MDIO_u8GetPortDirection+0x194>
			case(MDIO_U8_PORTD):MDIO_U8_DDRD = 0xFF;break;
    2242:	e1 e3       	ldi	r30, 0x31	; 49
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	8f ef       	ldi	r24, 0xFF	; 255
    2248:	80 83       	st	Z, r24
    224a:	6f c0       	rjmp	.+222    	; 0x232a <MDIO_u8GetPortDirection+0x194>
			}
			break;
		case(MDIO_U8_INPUT_FLOATING):
			switch(Copy_u8PortID){
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	3f 83       	std	Y+7, r19	; 0x07
    2254:	2e 83       	std	Y+6, r18	; 0x06
    2256:	8e 81       	ldd	r24, Y+6	; 0x06
    2258:	9f 81       	ldd	r25, Y+7	; 0x07
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	91 05       	cpc	r25, r1
    225e:	c9 f0       	breq	.+50     	; 0x2292 <MDIO_u8GetPortDirection+0xfc>
    2260:	2e 81       	ldd	r18, Y+6	; 0x06
    2262:	3f 81       	ldd	r19, Y+7	; 0x07
    2264:	22 30       	cpi	r18, 0x02	; 2
    2266:	31 05       	cpc	r19, r1
    2268:	2c f4       	brge	.+10     	; 0x2274 <MDIO_u8GetPortDirection+0xde>
    226a:	8e 81       	ldd	r24, Y+6	; 0x06
    226c:	9f 81       	ldd	r25, Y+7	; 0x07
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	61 f0       	breq	.+24     	; 0x228a <MDIO_u8GetPortDirection+0xf4>
    2272:	5b c0       	rjmp	.+182    	; 0x232a <MDIO_u8GetPortDirection+0x194>
    2274:	2e 81       	ldd	r18, Y+6	; 0x06
    2276:	3f 81       	ldd	r19, Y+7	; 0x07
    2278:	22 30       	cpi	r18, 0x02	; 2
    227a:	31 05       	cpc	r19, r1
    227c:	71 f0       	breq	.+28     	; 0x229a <MDIO_u8GetPortDirection+0x104>
    227e:	8e 81       	ldd	r24, Y+6	; 0x06
    2280:	9f 81       	ldd	r25, Y+7	; 0x07
    2282:	83 30       	cpi	r24, 0x03	; 3
    2284:	91 05       	cpc	r25, r1
    2286:	69 f0       	breq	.+26     	; 0x22a2 <MDIO_u8GetPortDirection+0x10c>
    2288:	50 c0       	rjmp	.+160    	; 0x232a <MDIO_u8GetPortDirection+0x194>
			case(MDIO_U8_PORTA):MDIO_U8_DDRA = 0x00;break;
    228a:	ea e3       	ldi	r30, 0x3A	; 58
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	10 82       	st	Z, r1
    2290:	4c c0       	rjmp	.+152    	; 0x232a <MDIO_u8GetPortDirection+0x194>
			case(MDIO_U8_PORTB):MDIO_U8_DDRB = 0x00;break;
    2292:	e7 e3       	ldi	r30, 0x37	; 55
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	10 82       	st	Z, r1
    2298:	48 c0       	rjmp	.+144    	; 0x232a <MDIO_u8GetPortDirection+0x194>
			case(MDIO_U8_PORTC):MDIO_U8_DDRC = 0x00;break;
    229a:	e4 e3       	ldi	r30, 0x34	; 52
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	10 82       	st	Z, r1
    22a0:	44 c0       	rjmp	.+136    	; 0x232a <MDIO_u8GetPortDirection+0x194>
			case(MDIO_U8_PORTD):MDIO_U8_DDRD = 0x00;break;
    22a2:	e1 e3       	ldi	r30, 0x31	; 49
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	10 82       	st	Z, r1
    22a8:	40 c0       	rjmp	.+128    	; 0x232a <MDIO_u8GetPortDirection+0x194>
			}
		break;
		case(MDIO_U8_INPUT_PULLED_UP):
			switch(Copy_u8PortID){
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	3d 83       	std	Y+5, r19	; 0x05
    22b2:	2c 83       	std	Y+4, r18	; 0x04
    22b4:	8c 81       	ldd	r24, Y+4	; 0x04
    22b6:	9d 81       	ldd	r25, Y+5	; 0x05
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	91 05       	cpc	r25, r1
    22bc:	e9 f0       	breq	.+58     	; 0x22f8 <MDIO_u8GetPortDirection+0x162>
    22be:	2c 81       	ldd	r18, Y+4	; 0x04
    22c0:	3d 81       	ldd	r19, Y+5	; 0x05
    22c2:	22 30       	cpi	r18, 0x02	; 2
    22c4:	31 05       	cpc	r19, r1
    22c6:	2c f4       	brge	.+10     	; 0x22d2 <MDIO_u8GetPortDirection+0x13c>
    22c8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ca:	9d 81       	ldd	r25, Y+5	; 0x05
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	61 f0       	breq	.+24     	; 0x22e8 <MDIO_u8GetPortDirection+0x152>
    22d0:	2c c0       	rjmp	.+88     	; 0x232a <MDIO_u8GetPortDirection+0x194>
    22d2:	2c 81       	ldd	r18, Y+4	; 0x04
    22d4:	3d 81       	ldd	r19, Y+5	; 0x05
    22d6:	22 30       	cpi	r18, 0x02	; 2
    22d8:	31 05       	cpc	r19, r1
    22da:	b1 f0       	breq	.+44     	; 0x2308 <MDIO_u8GetPortDirection+0x172>
    22dc:	8c 81       	ldd	r24, Y+4	; 0x04
    22de:	9d 81       	ldd	r25, Y+5	; 0x05
    22e0:	83 30       	cpi	r24, 0x03	; 3
    22e2:	91 05       	cpc	r25, r1
    22e4:	c9 f0       	breq	.+50     	; 0x2318 <MDIO_u8GetPortDirection+0x182>
    22e6:	21 c0       	rjmp	.+66     	; 0x232a <MDIO_u8GetPortDirection+0x194>
			case(MDIO_U8_PORTA):MDIO_U8_DDRA = 0x00;MDIO_U8_PORTA_REG = 0xFF;break;
    22e8:	ea e3       	ldi	r30, 0x3A	; 58
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	10 82       	st	Z, r1
    22ee:	eb e3       	ldi	r30, 0x3B	; 59
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	8f ef       	ldi	r24, 0xFF	; 255
    22f4:	80 83       	st	Z, r24
    22f6:	19 c0       	rjmp	.+50     	; 0x232a <MDIO_u8GetPortDirection+0x194>
			case(MDIO_U8_PORTB):MDIO_U8_DDRB = 0x00;MDIO_U8_PORTB_REG = 0xFF;break;
    22f8:	e7 e3       	ldi	r30, 0x37	; 55
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	10 82       	st	Z, r1
    22fe:	e8 e3       	ldi	r30, 0x38	; 56
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	8f ef       	ldi	r24, 0xFF	; 255
    2304:	80 83       	st	Z, r24
    2306:	11 c0       	rjmp	.+34     	; 0x232a <MDIO_u8GetPortDirection+0x194>
			case(MDIO_U8_PORTC):MDIO_U8_DDRC = 0x00;MDIO_U8_PORTC_REG = 0xFF;break;
    2308:	e4 e3       	ldi	r30, 0x34	; 52
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	10 82       	st	Z, r1
    230e:	e5 e3       	ldi	r30, 0x35	; 53
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	8f ef       	ldi	r24, 0xFF	; 255
    2314:	80 83       	st	Z, r24
    2316:	09 c0       	rjmp	.+18     	; 0x232a <MDIO_u8GetPortDirection+0x194>
			case(MDIO_U8_PORTD):MDIO_U8_DDRD = 0x00;MDIO_U8_PORTD_REG = 0xFF;break;
    2318:	e1 e3       	ldi	r30, 0x31	; 49
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	10 82       	st	Z, r1
    231e:	e2 e3       	ldi	r30, 0x32	; 50
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	8f ef       	ldi	r24, 0xFF	; 255
    2324:	80 83       	st	Z, r24
    2326:	01 c0       	rjmp	.+2      	; 0x232a <MDIO_u8GetPortDirection+0x194>
			}
		break;
		default:Local_u8ErrorState= STD_TYPES_NOK;
    2328:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    232a:	89 81       	ldd	r24, Y+1	; 0x01
}
    232c:	2b 96       	adiw	r28, 0x0b	; 11
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <MDIO_u8SetPortValue>:
u8 MDIO_u8SetPortValue(u8 Copy_u8PortID  , u8 Copy_u8PortValue){
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	00 d0       	rcall	.+0      	; 0x2344 <MDIO_u8SetPortValue+0x6>
    2344:	00 d0       	rcall	.+0      	; 0x2346 <MDIO_u8SetPortValue+0x8>
    2346:	0f 92       	push	r0
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	8a 83       	std	Y+2, r24	; 0x02
    234e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= STD_TYPES_NOK;
    2350:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= MDIO_U8_PORTD){
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	84 30       	cpi	r24, 0x04	; 4
    2356:	a0 f5       	brcc	.+104    	; 0x23c0 <MDIO_u8SetPortValue+0x82>
		Local_u8ErrorState = STD_TYPES_OK;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortID){
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	3d 83       	std	Y+5, r19	; 0x05
    2364:	2c 83       	std	Y+4, r18	; 0x04
    2366:	8c 81       	ldd	r24, Y+4	; 0x04
    2368:	9d 81       	ldd	r25, Y+5	; 0x05
    236a:	81 30       	cpi	r24, 0x01	; 1
    236c:	91 05       	cpc	r25, r1
    236e:	d1 f0       	breq	.+52     	; 0x23a4 <MDIO_u8SetPortValue+0x66>
    2370:	2c 81       	ldd	r18, Y+4	; 0x04
    2372:	3d 81       	ldd	r19, Y+5	; 0x05
    2374:	22 30       	cpi	r18, 0x02	; 2
    2376:	31 05       	cpc	r19, r1
    2378:	2c f4       	brge	.+10     	; 0x2384 <MDIO_u8SetPortValue+0x46>
    237a:	8c 81       	ldd	r24, Y+4	; 0x04
    237c:	9d 81       	ldd	r25, Y+5	; 0x05
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	61 f0       	breq	.+24     	; 0x239a <MDIO_u8SetPortValue+0x5c>
    2382:	1e c0       	rjmp	.+60     	; 0x23c0 <MDIO_u8SetPortValue+0x82>
    2384:	2c 81       	ldd	r18, Y+4	; 0x04
    2386:	3d 81       	ldd	r19, Y+5	; 0x05
    2388:	22 30       	cpi	r18, 0x02	; 2
    238a:	31 05       	cpc	r19, r1
    238c:	81 f0       	breq	.+32     	; 0x23ae <MDIO_u8SetPortValue+0x70>
    238e:	8c 81       	ldd	r24, Y+4	; 0x04
    2390:	9d 81       	ldd	r25, Y+5	; 0x05
    2392:	83 30       	cpi	r24, 0x03	; 3
    2394:	91 05       	cpc	r25, r1
    2396:	81 f0       	breq	.+32     	; 0x23b8 <MDIO_u8SetPortValue+0x7a>
    2398:	13 c0       	rjmp	.+38     	; 0x23c0 <MDIO_u8SetPortValue+0x82>
		case(MDIO_U8_PORTA):MDIO_U8_PORTA_REG = Copy_u8PortValue;break;
    239a:	eb e3       	ldi	r30, 0x3B	; 59
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	80 83       	st	Z, r24
    23a2:	0e c0       	rjmp	.+28     	; 0x23c0 <MDIO_u8SetPortValue+0x82>
		case(MDIO_U8_PORTB):MDIO_U8_PORTB_REG = Copy_u8PortValue;break;
    23a4:	e8 e3       	ldi	r30, 0x38	; 56
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	80 83       	st	Z, r24
    23ac:	09 c0       	rjmp	.+18     	; 0x23c0 <MDIO_u8SetPortValue+0x82>
		case(MDIO_U8_PORTC):MDIO_U8_PORTC_REG = Copy_u8PortValue;break;
    23ae:	e5 e3       	ldi	r30, 0x35	; 53
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	80 83       	st	Z, r24
    23b6:	04 c0       	rjmp	.+8      	; 0x23c0 <MDIO_u8SetPortValue+0x82>
		case(MDIO_U8_PORTD):MDIO_U8_PORTD_REG = Copy_u8PortValue;break;
    23b8:	e2 e3       	ldi	r30, 0x32	; 50
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	80 83       	st	Z, r24
		}
	}
	return Local_u8ErrorState;
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <MDIO_u8GetPortValue>:
u8 MDIO_u8GetPortValue(u8 Copy_u8PortID , u8 * Copy_u8PortValue){
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <MDIO_u8GetPortValue+0x6>
    23d8:	00 d0       	rcall	.+0      	; 0x23da <MDIO_u8GetPortValue+0x8>
    23da:	00 d0       	rcall	.+0      	; 0x23dc <MDIO_u8GetPortValue+0xa>
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	8a 83       	std	Y+2, r24	; 0x02
    23e2:	7c 83       	std	Y+4, r23	; 0x04
    23e4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= STD_TYPES_NOK;
    23e6:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PortID <= MDIO_U8_PORTD) && (Copy_u8PortValue != STD_TYPE_NULL)){
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	84 30       	cpi	r24, 0x04	; 4
    23ec:	08 f0       	brcs	.+2      	; 0x23f0 <MDIO_u8GetPortValue+0x1e>
    23ee:	40 c0       	rjmp	.+128    	; 0x2470 <MDIO_u8GetPortValue+0x9e>
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	e1 f1       	breq	.+120    	; 0x2470 <MDIO_u8GetPortValue+0x9e>
		Local_u8ErrorState = STD_TYPES_OK;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortID){
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	3e 83       	std	Y+6, r19	; 0x06
    2404:	2d 83       	std	Y+5, r18	; 0x05
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	91 05       	cpc	r25, r1
    240e:	e1 f0       	breq	.+56     	; 0x2448 <MDIO_u8GetPortValue+0x76>
    2410:	2d 81       	ldd	r18, Y+5	; 0x05
    2412:	3e 81       	ldd	r19, Y+6	; 0x06
    2414:	22 30       	cpi	r18, 0x02	; 2
    2416:	31 05       	cpc	r19, r1
    2418:	2c f4       	brge	.+10     	; 0x2424 <MDIO_u8GetPortValue+0x52>
    241a:	8d 81       	ldd	r24, Y+5	; 0x05
    241c:	9e 81       	ldd	r25, Y+6	; 0x06
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	61 f0       	breq	.+24     	; 0x243a <MDIO_u8GetPortValue+0x68>
    2422:	26 c0       	rjmp	.+76     	; 0x2470 <MDIO_u8GetPortValue+0x9e>
    2424:	2d 81       	ldd	r18, Y+5	; 0x05
    2426:	3e 81       	ldd	r19, Y+6	; 0x06
    2428:	22 30       	cpi	r18, 0x02	; 2
    242a:	31 05       	cpc	r19, r1
    242c:	a1 f0       	breq	.+40     	; 0x2456 <MDIO_u8GetPortValue+0x84>
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	9e 81       	ldd	r25, Y+6	; 0x06
    2432:	83 30       	cpi	r24, 0x03	; 3
    2434:	91 05       	cpc	r25, r1
    2436:	b1 f0       	breq	.+44     	; 0x2464 <MDIO_u8GetPortValue+0x92>
    2438:	1b c0       	rjmp	.+54     	; 0x2470 <MDIO_u8GetPortValue+0x9e>
		case(MDIO_U8_PORTA): * Copy_u8PortValue = MDIO_U8_PINA;break;
    243a:	e9 e3       	ldi	r30, 0x39	; 57
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	eb 81       	ldd	r30, Y+3	; 0x03
    2442:	fc 81       	ldd	r31, Y+4	; 0x04
    2444:	80 83       	st	Z, r24
    2446:	14 c0       	rjmp	.+40     	; 0x2470 <MDIO_u8GetPortValue+0x9e>
		case(MDIO_U8_PORTB): * Copy_u8PortValue = MDIO_U8_PINB;break;
    2448:	e6 e3       	ldi	r30, 0x36	; 54
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	eb 81       	ldd	r30, Y+3	; 0x03
    2450:	fc 81       	ldd	r31, Y+4	; 0x04
    2452:	80 83       	st	Z, r24
    2454:	0d c0       	rjmp	.+26     	; 0x2470 <MDIO_u8GetPortValue+0x9e>
		case(MDIO_U8_PORTC): * Copy_u8PortValue = MDIO_U8_PINC;break;
    2456:	e3 e3       	ldi	r30, 0x33	; 51
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	eb 81       	ldd	r30, Y+3	; 0x03
    245e:	fc 81       	ldd	r31, Y+4	; 0x04
    2460:	80 83       	st	Z, r24
    2462:	06 c0       	rjmp	.+12     	; 0x2470 <MDIO_u8GetPortValue+0x9e>
		case(MDIO_U8_PORTD): * Copy_u8PortValue = MDIO_U8_PIND;break;
    2464:	e0 e3       	ldi	r30, 0x30	; 48
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	eb 81       	ldd	r30, Y+3	; 0x03
    246c:	fc 81       	ldd	r31, Y+4	; 0x04
    246e:	80 83       	st	Z, r24
		}
	}
	return Local_u8ErrorState;
    2470:	89 81       	ldd	r24, Y+1	; 0x01
}
    2472:	26 96       	adiw	r28, 0x06	; 6
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <MDIO_U8INIT>:
u8 MDIO_U8INIT(void){
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
	/*PORT DIRECTIONS*/
	MDIO_U8_DDRA = PRIVATE_U8_CONC(MDIO_u8_PA7_DIRECTION , MDIO_u8_PA6_DIRECTION , MDIO_u8_PA5_DIRECTION , MDIO_u8_PA4_DIRECTION , MDIO_u8_PA3_DIRECTION, MDIO_u8_PA2_DIRECTION, MDIO_u8_PA1_DIRECTION ,MDIO_u8_PA0_DIRECTION);
    248c:	ea e3       	ldi	r30, 0x3A	; 58
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	8f ec       	ldi	r24, 0xCF	; 207
    2492:	80 83       	st	Z, r24
	MDIO_U8_DDRB = PRIVATE_U8_CONC(MDIO_u8_PB7_DIRECTION , MDIO_u8_PB6_DIRECTION , MDIO_u8_PB5_DIRECTION , MDIO_u8_PB4_DIRECTION , MDIO_u8_PB3_DIRECTION, MDIO_u8_PB2_DIRECTION, MDIO_u8_PB1_DIRECTION ,MDIO_u8_PB0_DIRECTION);
    2494:	e7 e3       	ldi	r30, 0x37	; 55
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	8f e3       	ldi	r24, 0x3F	; 63
    249a:	80 83       	st	Z, r24
	MDIO_U8_DDRC = PRIVATE_U8_CONC(MDIO_u8_PC7_DIRECTION , MDIO_u8_PC6_DIRECTION , MDIO_u8_PC5_DIRECTION , MDIO_u8_PC4_DIRECTION , MDIO_u8_PC3_DIRECTION, MDIO_u8_PC2_DIRECTION, MDIO_u8_PC1_DIRECTION ,MDIO_u8_PC0_DIRECTION);
    249c:	e4 e3       	ldi	r30, 0x34	; 52
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	8f ef       	ldi	r24, 0xFF	; 255
    24a2:	80 83       	st	Z, r24
	MDIO_U8_DDRD = PRIVATE_U8_CONC(MDIO_u8_PD7_DIRECTION , MDIO_u8_PD6_DIRECTION , MDIO_u8_PD5_DIRECTION , MDIO_u8_PD4_DIRECTION , MDIO_u8_PD3_DIRECTION, MDIO_u8_PD2_DIRECTION, MDIO_u8_PD1_DIRECTION ,MDIO_u8_PD0_DIRECTION);
    24a4:	e1 e3       	ldi	r30, 0x31	; 49
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	8a eb       	ldi	r24, 0xBA	; 186
    24aa:	80 83       	st	Z, r24
	/*PORT VALUES*/
	MDIO_U8_PORTA_REG = PRIVATE_U8_CONC(MDIO_u8_PA7_VALUE , MDIO_u8_PA6_VALUE , MDIO_u8_PA5_VALUE , MDIO_u8_PA4_VALUE , MDIO_u8_PA3_VALUE , MDIO_u8_PA2_VALUE , MDIO_u8_PA1_VALUE , MDIO_u8_PA0_VALUE);
    24ac:	eb e3       	ldi	r30, 0x3B	; 59
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 e3       	ldi	r24, 0x30	; 48
    24b2:	80 83       	st	Z, r24
	MDIO_U8_PORTB_REG = PRIVATE_U8_CONC(MDIO_u8_PB7_VALUE , MDIO_u8_PB6_VALUE , MDIO_u8_PB5_VALUE , MDIO_u8_PB4_VALUE , MDIO_u8_PB3_VALUE , MDIO_u8_PB2_VALUE , MDIO_u8_PB1_VALUE , MDIO_u8_PB0_VALUE);
    24b4:	e8 e3       	ldi	r30, 0x38	; 56
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	10 82       	st	Z, r1
	MDIO_U8_PORTC_REG = PRIVATE_U8_CONC(MDIO_u8_PC7_VALUE , MDIO_u8_PC6_VALUE , MDIO_u8_PC5_VALUE , MDIO_u8_PC4_VALUE , MDIO_u8_PC3_VALUE , MDIO_u8_PC2_VALUE , MDIO_u8_PC1_VALUE , MDIO_u8_PC0_VALUE);
    24ba:	e5 e3       	ldi	r30, 0x35	; 53
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	10 82       	st	Z, r1
	MDIO_U8_PORTD_REG = PRIVATE_U8_CONC(MDIO_u8_PD7_VALUE , MDIO_u8_PD6_VALUE , MDIO_u8_PD5_VALUE , MDIO_u8_PD4_VALUE , MDIO_u8_PD3_VALUE , MDIO_u8_PD2_VALUE , MDIO_u8_PD1_VALUE , MDIO_u8_PD0_VALUE);
    24c0:	e2 e3       	ldi	r30, 0x32	; 50
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	10 82       	st	Z, r1
	return STD_TYPES_OK;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
}
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <MOTORS_Forward>:
#include "STDTYPE.h"
#include "MDIO_Interface.h"
#include "MTMR_Interface.h"
#define F_CPU	8000000UL
#include <avr/delay.h>
void MOTORS_Forward(u8 OCR){
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	0f 92       	push	r0
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	89 83       	std	Y+1, r24	; 0x01
	MTMR_TMR0CompareMatchValue(OCR);
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	0e 94 80 14 	call	0x2900	; 0x2900 <MTMR_TMR0CompareMatchValue>
	MTMR_TMR2CompareMatchValue(OCR);
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <MTMR_TMR2CompareMatchValue>
	MDIO_u8SetPinValue(MDIO_U8_PORTA,MDIO_U8_PIN_1,MDIO_U8_LOW);
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	61 e0       	ldi	r22, 0x01	; 1
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(MDIO_U8_PORTA,MDIO_U8_PIN_2,MDIO_U8_LOW);
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	62 e0       	ldi	r22, 0x02	; 2
    24f4:	40 e0       	ldi	r20, 0x00	; 0
    24f6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
}
    24fa:	0f 90       	pop	r0
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <MOTORS_Backward>:
void MOTORS_Backward(){
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
	MDIO_u8SetPinValue(MDIO_U8_PORTA,MDIO_U8_PIN_1,MDIO_U8_HIGH);
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(MDIO_U8_PORTA,MDIO_U8_PIN_2,MDIO_U8_HIGH);
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	62 e0       	ldi	r22, 0x02	; 2
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	MTMR_TMR2CompareMatchValue(0);
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <MTMR_TMR2CompareMatchValue>
	MTMR_TMR0CompareMatchValue(0);
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	0e 94 80 14 	call	0x2900	; 0x2900 <MTMR_TMR0CompareMatchValue>
}
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <MOTORS_Right>:
void MOTORS_Right(void){
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	2e 97       	sbiw	r28, 0x0e	; 14
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
	MTMR_TMR0CompareMatchValue(254);
    2544:	8e ef       	ldi	r24, 0xFE	; 254
    2546:	0e 94 80 14 	call	0x2900	; 0x2900 <MTMR_TMR0CompareMatchValue>
	MDIO_u8SetPinValue(MDIO_U8_PORTA,MDIO_U8_PIN_1,MDIO_U8_LOW);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	61 e0       	ldi	r22, 0x01	; 1
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	MTMR_TMR2CompareMatchValue(0);
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <MTMR_TMR2CompareMatchValue>
	MDIO_u8SetPinValue(MDIO_U8_PORTA,MDIO_U8_PIN_2,MDIO_U8_HIGH);
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	62 e0       	ldi	r22, 0x02	; 2
    255e:	41 e0       	ldi	r20, 0x01	; 1
    2560:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	a8 ec       	ldi	r26, 0xC8	; 200
    256a:	b2 e4       	ldi	r27, 0x42	; 66
    256c:	8b 87       	std	Y+11, r24	; 0x0b
    256e:	9c 87       	std	Y+12, r25	; 0x0c
    2570:	ad 87       	std	Y+13, r26	; 0x0d
    2572:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2574:	6b 85       	ldd	r22, Y+11	; 0x0b
    2576:	7c 85       	ldd	r23, Y+12	; 0x0c
    2578:	8d 85       	ldd	r24, Y+13	; 0x0d
    257a:	9e 85       	ldd	r25, Y+14	; 0x0e
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4a ef       	ldi	r20, 0xFA	; 250
    2582:	54 e4       	ldi	r21, 0x44	; 68
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	8f 83       	std	Y+7, r24	; 0x07
    258e:	98 87       	std	Y+8, r25	; 0x08
    2590:	a9 87       	std	Y+9, r26	; 0x09
    2592:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2594:	6f 81       	ldd	r22, Y+7	; 0x07
    2596:	78 85       	ldd	r23, Y+8	; 0x08
    2598:	89 85       	ldd	r24, Y+9	; 0x09
    259a:	9a 85       	ldd	r25, Y+10	; 0x0a
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e8       	ldi	r20, 0x80	; 128
    25a2:	5f e3       	ldi	r21, 0x3F	; 63
    25a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a8:	88 23       	and	r24, r24
    25aa:	2c f4       	brge	.+10     	; 0x25b6 <MOTORS_Right+0x86>
		__ticks = 1;
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	9e 83       	std	Y+6, r25	; 0x06
    25b2:	8d 83       	std	Y+5, r24	; 0x05
    25b4:	3f c0       	rjmp	.+126    	; 0x2634 <MOTORS_Right+0x104>
	else if (__tmp > 65535)
    25b6:	6f 81       	ldd	r22, Y+7	; 0x07
    25b8:	78 85       	ldd	r23, Y+8	; 0x08
    25ba:	89 85       	ldd	r24, Y+9	; 0x09
    25bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	3f ef       	ldi	r19, 0xFF	; 255
    25c2:	4f e7       	ldi	r20, 0x7F	; 127
    25c4:	57 e4       	ldi	r21, 0x47	; 71
    25c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ca:	18 16       	cp	r1, r24
    25cc:	4c f5       	brge	.+82     	; 0x2620 <MOTORS_Right+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e2       	ldi	r20, 0x20	; 32
    25dc:	51 e4       	ldi	r21, 0x41	; 65
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	bc 01       	movw	r22, r24
    25e8:	cd 01       	movw	r24, r26
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	9e 83       	std	Y+6, r25	; 0x06
    25f4:	8d 83       	std	Y+5, r24	; 0x05
    25f6:	0f c0       	rjmp	.+30     	; 0x2616 <MOTORS_Right+0xe6>
    25f8:	88 ec       	ldi	r24, 0xC8	; 200
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	9c 83       	std	Y+4, r25	; 0x04
    25fe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	9c 81       	ldd	r25, Y+4	; 0x04
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <MOTORS_Right+0xd4>
    2608:	9c 83       	std	Y+4, r25	; 0x04
    260a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	9e 83       	std	Y+6, r25	; 0x06
    2614:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2616:	8d 81       	ldd	r24, Y+5	; 0x05
    2618:	9e 81       	ldd	r25, Y+6	; 0x06
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	69 f7       	brne	.-38     	; 0x25f8 <MOTORS_Right+0xc8>
    261e:	14 c0       	rjmp	.+40     	; 0x2648 <MOTORS_Right+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2620:	6f 81       	ldd	r22, Y+7	; 0x07
    2622:	78 85       	ldd	r23, Y+8	; 0x08
    2624:	89 85       	ldd	r24, Y+9	; 0x09
    2626:	9a 85       	ldd	r25, Y+10	; 0x0a
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	9e 81       	ldd	r25, Y+6	; 0x06
    2638:	9a 83       	std	Y+2, r25	; 0x02
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	9a 81       	ldd	r25, Y+2	; 0x02
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <MOTORS_Right+0x110>
    2644:	9a 83       	std	Y+2, r25	; 0x02
    2646:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	MOTORS_Stop();
    2648:	0e 94 c6 13 	call	0x278c	; 0x278c <MOTORS_Stop>
}
    264c:	2e 96       	adiw	r28, 0x0e	; 14
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <MOTORS_Left>:
void MOTORS_Left(void){
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	2e 97       	sbiw	r28, 0x0e	; 14
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
	MTMR_TMR0CompareMatchValue(0);
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	0e 94 80 14 	call	0x2900	; 0x2900 <MTMR_TMR0CompareMatchValue>
	MDIO_u8SetPinValue(MDIO_U8_PORTA,MDIO_U8_PIN_1,MDIO_U8_HIGH);
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	61 e0       	ldi	r22, 0x01	; 1
    267c:	41 e0       	ldi	r20, 0x01	; 1
    267e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	MTMR_TMR2CompareMatchValue(254);
    2682:	8e ef       	ldi	r24, 0xFE	; 254
    2684:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <MTMR_TMR2CompareMatchValue>
	MDIO_u8SetPinValue(MDIO_U8_PORTA,MDIO_U8_PIN_2,MDIO_U8_LOW);
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	62 e0       	ldi	r22, 0x02	; 2
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	a8 ec       	ldi	r26, 0xC8	; 200
    2698:	b2 e4       	ldi	r27, 0x42	; 66
    269a:	8b 87       	std	Y+11, r24	; 0x0b
    269c:	9c 87       	std	Y+12, r25	; 0x0c
    269e:	ad 87       	std	Y+13, r26	; 0x0d
    26a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	4a ef       	ldi	r20, 0xFA	; 250
    26b0:	54 e4       	ldi	r21, 0x44	; 68
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	8f 83       	std	Y+7, r24	; 0x07
    26bc:	98 87       	std	Y+8, r25	; 0x08
    26be:	a9 87       	std	Y+9, r26	; 0x09
    26c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c2:	6f 81       	ldd	r22, Y+7	; 0x07
    26c4:	78 85       	ldd	r23, Y+8	; 0x08
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e8       	ldi	r20, 0x80	; 128
    26d0:	5f e3       	ldi	r21, 0x3F	; 63
    26d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d6:	88 23       	and	r24, r24
    26d8:	2c f4       	brge	.+10     	; 0x26e4 <MOTORS_Left+0x86>
		__ticks = 1;
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	3f c0       	rjmp	.+126    	; 0x2762 <MOTORS_Left+0x104>
	else if (__tmp > 65535)
    26e4:	6f 81       	ldd	r22, Y+7	; 0x07
    26e6:	78 85       	ldd	r23, Y+8	; 0x08
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	3f ef       	ldi	r19, 0xFF	; 255
    26f0:	4f e7       	ldi	r20, 0x7F	; 127
    26f2:	57 e4       	ldi	r21, 0x47	; 71
    26f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f8:	18 16       	cp	r1, r24
    26fa:	4c f5       	brge	.+82     	; 0x274e <MOTORS_Left+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2700:	8d 85       	ldd	r24, Y+13	; 0x0d
    2702:	9e 85       	ldd	r25, Y+14	; 0x0e
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e2       	ldi	r20, 0x20	; 32
    270a:	51 e4       	ldi	r21, 0x41	; 65
    270c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	bc 01       	movw	r22, r24
    2716:	cd 01       	movw	r24, r26
    2718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
    2724:	0f c0       	rjmp	.+30     	; 0x2744 <MOTORS_Left+0xe6>
    2726:	88 ec       	ldi	r24, 0xC8	; 200
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9c 83       	std	Y+4, r25	; 0x04
    272c:	8b 83       	std	Y+3, r24	; 0x03
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <MOTORS_Left+0xd4>
    2736:	9c 83       	std	Y+4, r25	; 0x04
    2738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	9e 81       	ldd	r25, Y+6	; 0x06
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2744:	8d 81       	ldd	r24, Y+5	; 0x05
    2746:	9e 81       	ldd	r25, Y+6	; 0x06
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	69 f7       	brne	.-38     	; 0x2726 <MOTORS_Left+0xc8>
    274c:	14 c0       	rjmp	.+40     	; 0x2776 <MOTORS_Left+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274e:	6f 81       	ldd	r22, Y+7	; 0x07
    2750:	78 85       	ldd	r23, Y+8	; 0x08
    2752:	89 85       	ldd	r24, Y+9	; 0x09
    2754:	9a 85       	ldd	r25, Y+10	; 0x0a
    2756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
    2762:	8d 81       	ldd	r24, Y+5	; 0x05
    2764:	9e 81       	ldd	r25, Y+6	; 0x06
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	9a 81       	ldd	r25, Y+2	; 0x02
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <MOTORS_Left+0x110>
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	MOTORS_Stop();
    2776:	0e 94 c6 13 	call	0x278c	; 0x278c <MOTORS_Stop>
}
    277a:	2e 96       	adiw	r28, 0x0e	; 14
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <MOTORS_Stop>:
void MOTORS_Stop(void){
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	2e 97       	sbiw	r28, 0x0e	; 14
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
	MDIO_u8SetPinValue(MDIO_U8_PORTA,MDIO_U8_PIN_1,MDIO_U8_LOW);
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	61 e0       	ldi	r22, 0x01	; 1
    27a4:	40 e0       	ldi	r20, 0x00	; 0
    27a6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(MDIO_U8_PORTA,MDIO_U8_PIN_2,MDIO_U8_LOW);
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	62 e0       	ldi	r22, 0x02	; 2
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
	MTMR_TMR0CompareMatchValue(0);
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	0e 94 80 14 	call	0x2900	; 0x2900 <MTMR_TMR0CompareMatchValue>
	MTMR_TMR2CompareMatchValue(0);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <MTMR_TMR2CompareMatchValue>
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	a8 ec       	ldi	r26, 0xC8	; 200
    27c6:	b2 e4       	ldi	r27, 0x42	; 66
    27c8:	8b 87       	std	Y+11, r24	; 0x0b
    27ca:	9c 87       	std	Y+12, r25	; 0x0c
    27cc:	ad 87       	std	Y+13, r26	; 0x0d
    27ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	4a ef       	ldi	r20, 0xFA	; 250
    27de:	54 e4       	ldi	r21, 0x44	; 68
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	8f 83       	std	Y+7, r24	; 0x07
    27ea:	98 87       	std	Y+8, r25	; 0x08
    27ec:	a9 87       	std	Y+9, r26	; 0x09
    27ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f0:	6f 81       	ldd	r22, Y+7	; 0x07
    27f2:	78 85       	ldd	r23, Y+8	; 0x08
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e8       	ldi	r20, 0x80	; 128
    27fe:	5f e3       	ldi	r21, 0x3F	; 63
    2800:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2804:	88 23       	and	r24, r24
    2806:	2c f4       	brge	.+10     	; 0x2812 <MOTORS_Stop+0x86>
		__ticks = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9e 83       	std	Y+6, r25	; 0x06
    280e:	8d 83       	std	Y+5, r24	; 0x05
    2810:	3f c0       	rjmp	.+126    	; 0x2890 <MOTORS_Stop+0x104>
	else if (__tmp > 65535)
    2812:	6f 81       	ldd	r22, Y+7	; 0x07
    2814:	78 85       	ldd	r23, Y+8	; 0x08
    2816:	89 85       	ldd	r24, Y+9	; 0x09
    2818:	9a 85       	ldd	r25, Y+10	; 0x0a
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	3f ef       	ldi	r19, 0xFF	; 255
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	57 e4       	ldi	r21, 0x47	; 71
    2822:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2826:	18 16       	cp	r1, r24
    2828:	4c f5       	brge	.+82     	; 0x287c <MOTORS_Stop+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282a:	6b 85       	ldd	r22, Y+11	; 0x0b
    282c:	7c 85       	ldd	r23, Y+12	; 0x0c
    282e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2830:	9e 85       	ldd	r25, Y+14	; 0x0e
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e2       	ldi	r20, 0x20	; 32
    2838:	51 e4       	ldi	r21, 0x41	; 65
    283a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9e 83       	std	Y+6, r25	; 0x06
    2850:	8d 83       	std	Y+5, r24	; 0x05
    2852:	0f c0       	rjmp	.+30     	; 0x2872 <MOTORS_Stop+0xe6>
    2854:	88 ec       	ldi	r24, 0xC8	; 200
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9c 83       	std	Y+4, r25	; 0x04
    285a:	8b 83       	std	Y+3, r24	; 0x03
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	9c 81       	ldd	r25, Y+4	; 0x04
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <MOTORS_Stop+0xd4>
    2864:	9c 83       	std	Y+4, r25	; 0x04
    2866:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2868:	8d 81       	ldd	r24, Y+5	; 0x05
    286a:	9e 81       	ldd	r25, Y+6	; 0x06
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2872:	8d 81       	ldd	r24, Y+5	; 0x05
    2874:	9e 81       	ldd	r25, Y+6	; 0x06
    2876:	00 97       	sbiw	r24, 0x00	; 0
    2878:	69 f7       	brne	.-38     	; 0x2854 <MOTORS_Stop+0xc8>
    287a:	14 c0       	rjmp	.+40     	; 0x28a4 <MOTORS_Stop+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287c:	6f 81       	ldd	r22, Y+7	; 0x07
    287e:	78 85       	ldd	r23, Y+8	; 0x08
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9e 83       	std	Y+6, r25	; 0x06
    288e:	8d 83       	std	Y+5, r24	; 0x05
    2890:	8d 81       	ldd	r24, Y+5	; 0x05
    2892:	9e 81       	ldd	r25, Y+6	; 0x06
    2894:	9a 83       	std	Y+2, r25	; 0x02
    2896:	89 83       	std	Y+1, r24	; 0x01
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	9a 81       	ldd	r25, Y+2	; 0x02
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <MOTORS_Stop+0x110>
    28a0:	9a 83       	std	Y+2, r25	; 0x02
    28a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

}
    28a4:	2e 96       	adiw	r28, 0x0e	; 14
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <MTMR_TIMER0_INIT>:
#include "MTMR_Interface.h"
#include "MTMR_Private.h"

static void(*MTMR_PF[2])(void) = {STD_TYPE_NULL , STD_TYPE_NULL};

u8 MTMR_TIMER0_INIT(void){
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	0f 92       	push	r0
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
	/*Select timer mode*/
	MTMR_U8_TCCR0_REG |= MTMR_U8_TMR0_PhaseCorrectPWM;
    28c0:	a3 e5       	ldi	r26, 0x53	; 83
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e3 e5       	ldi	r30, 0x53	; 83
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	80 64       	ori	r24, 0x40	; 64
    28cc:	8c 93       	st	X, r24
	/*Set OC0 PIN => Noninverting mode */
	SET_BIT(MTMR_U8_TCCR0_REG , 5);
    28ce:	a3 e5       	ldi	r26, 0x53	; 83
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e3 e5       	ldi	r30, 0x53	; 83
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	80 62       	ori	r24, 0x20	; 32
    28da:	8c 93       	st	X, r24
	CLEAR_BIT(MTMR_U8_TCCR0_REG , 4);
    28dc:	a3 e5       	ldi	r26, 0x53	; 83
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	e3 e5       	ldi	r30, 0x53	; 83
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	8f 7e       	andi	r24, 0xEF	; 239
    28e8:	8c 93       	st	X, r24
	/*Set preScaler(8.. for now)*/
	MTMR_U8_TCCR0_REG |= 0b00000010;
    28ea:	a3 e5       	ldi	r26, 0x53	; 83
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e3 e5       	ldi	r30, 0x53	; 83
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	82 60       	ori	r24, 0x02	; 2
    28f6:	8c 93       	st	X, r24
}
    28f8:	0f 90       	pop	r0
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <MTMR_TMR0CompareMatchValue>:

u8 MTMR_TMR0CompareMatchValue(u8 Copy_u8CompareMatchValue){
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	00 d0       	rcall	.+0      	; 0x2906 <MTMR_TMR0CompareMatchValue+0x6>
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	89 83       	std	Y+1, r24	; 0x01
	MTMR_U8_OCR0_REG = Copy_u8CompareMatchValue;
    290c:	ec e5       	ldi	r30, 0x5C	; 92
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	80 83       	st	Z, r24
}
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <MTMR_U8TMR0_SetCallBack>:

u8 MTMR_U8TMR0_SetCallBack(u8 CopyInterruptNo , void (*Copy_pf)(void)){
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	00 d0       	rcall	.+0      	; 0x2924 <MTMR_U8TMR0_SetCallBack+0x6>
    2924:	00 d0       	rcall	.+0      	; 0x2926 <MTMR_U8TMR0_SetCallBack+0x8>
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	8a 83       	std	Y+2, r24	; 0x02
    292c:	7c 83       	std	Y+4, r23	; 0x04
    292e:	6b 83       	std	Y+3, r22	; 0x03
	u8 LocalstateError = STD_TYPES_OK;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != STD_TYPE_NULL){
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	9c 81       	ldd	r25, Y+4	; 0x04
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	61 f0       	breq	.+24     	; 0x2954 <MTMR_U8TMR0_SetCallBack+0x36>
		MTMR_PF[CopyInterruptNo] =Copy_pf;
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	88 2f       	mov	r24, r24
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	88 0f       	add	r24, r24
    2944:	99 1f       	adc	r25, r25
    2946:	fc 01       	movw	r30, r24
    2948:	ec 51       	subi	r30, 0x1C	; 28
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	9c 81       	ldd	r25, Y+4	; 0x04
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	80 83       	st	Z, r24
	}
	return LocalstateError;
    2954:	89 81       	ldd	r24, Y+1	; 0x01
}
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <MTMR_TIMER0_Disable>:
void MTMR_TIMER0_Disable(void){
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
	MTMR_U8_TCCR0_REG |= 0b00000000;
    296c:	e3 e5       	ldi	r30, 0x53	; 83
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	a3 e5       	ldi	r26, 0x53	; 83
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	8c 91       	ld	r24, X
    2976:	80 83       	st	Z, r24
}
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void){
    297e:	1f 92       	push	r1
    2980:	0f 92       	push	r0
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	0f 92       	push	r0
    2986:	11 24       	eor	r1, r1
    2988:	2f 93       	push	r18
    298a:	3f 93       	push	r19
    298c:	4f 93       	push	r20
    298e:	5f 93       	push	r21
    2990:	6f 93       	push	r22
    2992:	7f 93       	push	r23
    2994:	8f 93       	push	r24
    2996:	9f 93       	push	r25
    2998:	af 93       	push	r26
    299a:	bf 93       	push	r27
    299c:	ef 93       	push	r30
    299e:	ff 93       	push	r31
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
	static  u16 Local_counter =0;
	Local_counter++;
    29a8:	80 91 e8 00 	lds	r24, 0x00E8
    29ac:	90 91 e9 00 	lds	r25, 0x00E9
    29b0:	01 96       	adiw	r24, 0x01	; 1
    29b2:	90 93 e9 00 	sts	0x00E9, r25
    29b6:	80 93 e8 00 	sts	0x00E8, r24
	if(Local_counter ==3907){
    29ba:	80 91 e8 00 	lds	r24, 0x00E8
    29be:	90 91 e9 00 	lds	r25, 0x00E9
    29c2:	2f e0       	ldi	r18, 0x0F	; 15
    29c4:	83 34       	cpi	r24, 0x43	; 67
    29c6:	92 07       	cpc	r25, r18
    29c8:	99 f4       	brne	.+38     	; 0x29f0 <__vector_11+0x72>
		/*Reset PreLoad value*/
		MTMR_U8_TCNT0_REG = MTMR_U8_TMRO_PreLoadValue;
    29ca:	e2 e5       	ldi	r30, 0x52	; 82
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 ec       	ldi	r24, 0xC0	; 192
    29d0:	80 83       	st	Z, r24
		/*Action*/
		if(MTMR_PF[MTMR_TMR0_OVF] != STD_TYPE_NULL){
    29d2:	80 91 e4 00 	lds	r24, 0x00E4
    29d6:	90 91 e5 00 	lds	r25, 0x00E5
    29da:	00 97       	sbiw	r24, 0x00	; 0
    29dc:	29 f0       	breq	.+10     	; 0x29e8 <__vector_11+0x6a>
			MTMR_PF[MTMR_TMR0_OVF]();
    29de:	e0 91 e4 00 	lds	r30, 0x00E4
    29e2:	f0 91 e5 00 	lds	r31, 0x00E5
    29e6:	09 95       	icall
		}
		/*Clear Counter*/
		Local_counter = 0;
    29e8:	10 92 e9 00 	sts	0x00E9, r1
    29ec:	10 92 e8 00 	sts	0x00E8, r1
	}
}
    29f0:	cf 91       	pop	r28
    29f2:	df 91       	pop	r29
    29f4:	ff 91       	pop	r31
    29f6:	ef 91       	pop	r30
    29f8:	bf 91       	pop	r27
    29fa:	af 91       	pop	r26
    29fc:	9f 91       	pop	r25
    29fe:	8f 91       	pop	r24
    2a00:	7f 91       	pop	r23
    2a02:	6f 91       	pop	r22
    2a04:	5f 91       	pop	r21
    2a06:	4f 91       	pop	r20
    2a08:	3f 91       	pop	r19
    2a0a:	2f 91       	pop	r18
    2a0c:	0f 90       	pop	r0
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	0f 90       	pop	r0
    2a12:	1f 90       	pop	r1
    2a14:	18 95       	reti

00002a16 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void){
    2a16:	1f 92       	push	r1
    2a18:	0f 92       	push	r0
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	0f 92       	push	r0
    2a1e:	11 24       	eor	r1, r1
    2a20:	2f 93       	push	r18
    2a22:	3f 93       	push	r19
    2a24:	4f 93       	push	r20
    2a26:	5f 93       	push	r21
    2a28:	6f 93       	push	r22
    2a2a:	7f 93       	push	r23
    2a2c:	8f 93       	push	r24
    2a2e:	9f 93       	push	r25
    2a30:	af 93       	push	r26
    2a32:	bf 93       	push	r27
    2a34:	ef 93       	push	r30
    2a36:	ff 93       	push	r31
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
	static  u16 Local_counter =0;
	Local_counter++;
    2a40:	80 91 ea 00 	lds	r24, 0x00EA
    2a44:	90 91 eb 00 	lds	r25, 0x00EB
    2a48:	01 96       	adiw	r24, 0x01	; 1
    2a4a:	90 93 eb 00 	sts	0x00EB, r25
    2a4e:	80 93 ea 00 	sts	0x00EA, r24
	if(Local_counter ==10000){
    2a52:	80 91 ea 00 	lds	r24, 0x00EA
    2a56:	90 91 eb 00 	lds	r25, 0x00EB
    2a5a:	27 e2       	ldi	r18, 0x27	; 39
    2a5c:	80 31       	cpi	r24, 0x10	; 16
    2a5e:	92 07       	cpc	r25, r18
    2a60:	79 f4       	brne	.+30     	; 0x2a80 <__vector_10+0x6a>
		/*Action*/
		if(MTMR_PF[MTMR_TMR0_CTC] != STD_TYPE_NULL){
    2a62:	80 91 e6 00 	lds	r24, 0x00E6
    2a66:	90 91 e7 00 	lds	r25, 0x00E7
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	29 f0       	breq	.+10     	; 0x2a78 <__vector_10+0x62>
			MTMR_PF[MTMR_TMR0_CTC]();
    2a6e:	e0 91 e6 00 	lds	r30, 0x00E6
    2a72:	f0 91 e7 00 	lds	r31, 0x00E7
    2a76:	09 95       	icall
		}
		/*Clear Counter*/
		Local_counter = 0;
    2a78:	10 92 eb 00 	sts	0x00EB, r1
    2a7c:	10 92 ea 00 	sts	0x00EA, r1
	}
}
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	ff 91       	pop	r31
    2a86:	ef 91       	pop	r30
    2a88:	bf 91       	pop	r27
    2a8a:	af 91       	pop	r26
    2a8c:	9f 91       	pop	r25
    2a8e:	8f 91       	pop	r24
    2a90:	7f 91       	pop	r23
    2a92:	6f 91       	pop	r22
    2a94:	5f 91       	pop	r21
    2a96:	4f 91       	pop	r20
    2a98:	3f 91       	pop	r19
    2a9a:	2f 91       	pop	r18
    2a9c:	0f 90       	pop	r0
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	0f 90       	pop	r0
    2aa2:	1f 90       	pop	r1
    2aa4:	18 95       	reti

00002aa6 <MTMR_TIMER1_INIT>:

u8 MTMR_TIMER1_INIT(void){
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	0f 92       	push	r0
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
	u8 LocalStateError =STD_TYPES_OK;
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	89 83       	std	Y+1, r24	; 0x01
	/*Choose mode .. Normal fow now */
	CLEAR_BIT(MTMR_U8_TCCR1A_REG , 0);
    2ab4:	af e4       	ldi	r26, 0x4F	; 79
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	ef e4       	ldi	r30, 0x4F	; 79
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	8e 7f       	andi	r24, 0xFE	; 254
    2ac0:	8c 93       	st	X, r24
	CLEAR_BIT(MTMR_U8_TCCR1A_REG , 1);
    2ac2:	af e4       	ldi	r26, 0x4F	; 79
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	ef e4       	ldi	r30, 0x4F	; 79
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	8d 7f       	andi	r24, 0xFD	; 253
    2ace:	8c 93       	st	X, r24
	CLEAR_BIT(MTMR_U8_TCCR1B_REG , 3);
    2ad0:	ae e4       	ldi	r26, 0x4E	; 78
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	ee e4       	ldi	r30, 0x4E	; 78
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	87 7f       	andi	r24, 0xF7	; 247
    2adc:	8c 93       	st	X, r24
	CLEAR_BIT(MTMR_U8_TCCR1B_REG , 4);
    2ade:	ae e4       	ldi	r26, 0x4E	; 78
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	ee e4       	ldi	r30, 0x4E	; 78
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	8f 7e       	andi	r24, 0xEF	; 239
    2aea:	8c 93       	st	X, r24
	/*Set preScaler(8.. for now)*/
	MTMR_U8_TCCR1B_REG |= 0b00000001;
    2aec:	ae e4       	ldi	r26, 0x4E	; 78
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	ee e4       	ldi	r30, 0x4E	; 78
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	81 60       	ori	r24, 0x01	; 1
    2af8:	8c 93       	st	X, r24
	return LocalStateError;
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2afc:	0f 90       	pop	r0
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	08 95       	ret

00002b04 <MTMR_TIMER1_Disable>:
void MTMR_TIMER1_Disable(void){
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
	MTMR_U8_TCCR1B_REG |= 0b00000000;
    2b0c:	ee e4       	ldi	r30, 0x4E	; 78
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	ae e4       	ldi	r26, 0x4E	; 78
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	8c 91       	ld	r24, X
    2b16:	80 83       	st	Z, r24
}
    2b18:	cf 91       	pop	r28
    2b1a:	df 91       	pop	r29
    2b1c:	08 95       	ret

00002b1e <MTMR_TMR1CompareMatchValue>:
u8 MTMR_TMR1CompareMatchValue(u16 Copy_u16CompareMatchValue){
    2b1e:	df 93       	push	r29
    2b20:	cf 93       	push	r28
    2b22:	00 d0       	rcall	.+0      	; 0x2b24 <MTMR_TMR1CompareMatchValue+0x6>
    2b24:	0f 92       	push	r0
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	89 83       	std	Y+1, r24	; 0x01
	MTMR_U16_OCR1A_REG = Copy_u16CompareMatchValue;
    2b2e:	ea e4       	ldi	r30, 0x4A	; 74
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	9a 81       	ldd	r25, Y+2	; 0x02
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	80 83       	st	Z, r24
}
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	cf 91       	pop	r28
    2b42:	df 91       	pop	r29
    2b44:	08 95       	ret

00002b46 <MTMR_TIMER1_GetValue>:
u16 MTMR_TIMER1_GetValue(void){
    2b46:	df 93       	push	r29
    2b48:	cf 93       	push	r28
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
	return MTMR_U16_TCNT1_REG;
    2b4e:	ec e4       	ldi	r30, 0x4C	; 76
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
}
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <HICU_init>:
/*______________________________________________________________________________________________________*/
volatile static u16 ICU_Ton=0 ;

u8 HICU_init(void){
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	0f 92       	push	r0
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
	MTMR_TIMER1_INIT();
    2b66:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <MTMR_TIMER1_INIT>
	/*Select triggering source => RAISING EDGE*/
	SET_BIT(MTMR_U8_TCCR1B_REG , 6);
    2b6a:	ae e4       	ldi	r26, 0x4E	; 78
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	ee e4       	ldi	r30, 0x4E	; 78
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	80 64       	ori	r24, 0x40	; 64
    2b76:	8c 93       	st	X, r24
	/*Enable ICU Interrupt*/
	SET_BIT(MTMR_U8_TIMSK_REG , 5);
    2b78:	a9 e5       	ldi	r26, 0x59	; 89
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	e9 e5       	ldi	r30, 0x59	; 89
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	80 62       	ori	r24, 0x20	; 32
    2b84:	8c 93       	st	X, r24
}
    2b86:	0f 90       	pop	r0
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <HICU_GET_PWM_ON_Period>:
u8 HICU_GET_PWM_ON_Period(void){
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
	return ICU_Ton;
    2b96:	80 91 ec 00 	lds	r24, 0x00EC
    2b9a:	90 91 ed 00 	lds	r25, 0x00ED
}
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <__vector_6>:
void __vector_6(void) __attribute__((signal));
void __vector_6(void){
    2ba4:	1f 92       	push	r1
    2ba6:	0f 92       	push	r0
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	0f 92       	push	r0
    2bac:	11 24       	eor	r1, r1
    2bae:	2f 93       	push	r18
    2bb0:	3f 93       	push	r19
    2bb2:	8f 93       	push	r24
    2bb4:	9f 93       	push	r25
    2bb6:	af 93       	push	r26
    2bb8:	bf 93       	push	r27
    2bba:	ef 93       	push	r30
    2bbc:	ff 93       	push	r31
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <__vector_6+0x20>
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
	u16 Locaol_TimerValue = MTMR_U16_ICR1_REG;
    2bc8:	e6 e4       	ldi	r30, 0x46	; 70
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
    2bd2:	89 83       	std	Y+1, r24	; 0x01
	static u16 OldRead=0;
	static u8 flag =0;
	/*READ TIMER VALUE*/
	if(flag == 0){
    2bd4:	80 91 ee 00 	lds	r24, 0x00EE
    2bd8:	88 23       	and	r24, r24
    2bda:	89 f4       	brne	.+34     	; 0x2bfe <__vector_6+0x5a>
		OldRead = Locaol_TimerValue;
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	90 93 f0 00 	sts	0x00F0, r25
    2be4:	80 93 ef 00 	sts	0x00EF, r24
		flag = 1 ;
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	80 93 ee 00 	sts	0x00EE, r24
		/*Change Interrupt source to falling edge*/
		CLEAR_BIT(MTMR_U8_TCCR1B_REG , 6);
    2bee:	ae e4       	ldi	r26, 0x4E	; 78
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	ee e4       	ldi	r30, 0x4E	; 78
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	8f 7b       	andi	r24, 0xBF	; 191
    2bfa:	8c 93       	st	X, r24
    2bfc:	15 c0       	rjmp	.+42     	; 0x2c28 <__vector_6+0x84>
	}else{
		/*Calculate Ton period*/
		ICU_Ton = (Locaol_TimerValue - OldRead ) ;
    2bfe:	20 91 ef 00 	lds	r18, 0x00EF
    2c02:	30 91 f0 00 	lds	r19, 0x00F0
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0a:	82 1b       	sub	r24, r18
    2c0c:	93 0b       	sbc	r25, r19
    2c0e:	90 93 ed 00 	sts	0x00ED, r25
    2c12:	80 93 ec 00 	sts	0x00EC, r24
		flag = 0 ;
    2c16:	10 92 ee 00 	sts	0x00EE, r1
		/*Change Interrupt source to raising edge*/
		SET_BIT(MTMR_U8_TCCR1B_REG , 6);
    2c1a:	ae e4       	ldi	r26, 0x4E	; 78
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	ee e4       	ldi	r30, 0x4E	; 78
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	80 64       	ori	r24, 0x40	; 64
    2c26:	8c 93       	st	X, r24
	}
}
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	ff 91       	pop	r31
    2c32:	ef 91       	pop	r30
    2c34:	bf 91       	pop	r27
    2c36:	af 91       	pop	r26
    2c38:	9f 91       	pop	r25
    2c3a:	8f 91       	pop	r24
    2c3c:	3f 91       	pop	r19
    2c3e:	2f 91       	pop	r18
    2c40:	0f 90       	pop	r0
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	0f 90       	pop	r0
    2c46:	1f 90       	pop	r1
    2c48:	18 95       	reti

00002c4a <MTMR_TIMER2_INIT>:
u8 MTMR_TIMER2_INIT(void){
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	0f 92       	push	r0
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
	/*Select timer mode*/
	MTMR_U8_TCCR2_REG |= MTMR_U8_TMR0_PhaseCorrectPWM;
    2c54:	a5 e4       	ldi	r26, 0x45	; 69
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e5 e4       	ldi	r30, 0x45	; 69
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	80 64       	ori	r24, 0x40	; 64
    2c60:	8c 93       	st	X, r24
	/*Set OC2 PIN => Noninverting mode */
	SET_BIT(MTMR_U8_TCCR2_REG , 5);
    2c62:	a5 e4       	ldi	r26, 0x45	; 69
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e5 e4       	ldi	r30, 0x45	; 69
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	80 62       	ori	r24, 0x20	; 32
    2c6e:	8c 93       	st	X, r24
	CLEAR_BIT(MTMR_U8_TCCR2_REG , 4);
    2c70:	a5 e4       	ldi	r26, 0x45	; 69
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	e5 e4       	ldi	r30, 0x45	; 69
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	8f 7e       	andi	r24, 0xEF	; 239
    2c7c:	8c 93       	st	X, r24
	/*Set preScaler(8.. for now)*/
	MTMR_U8_TCCR2_REG |= 0b00000010;
    2c7e:	a5 e4       	ldi	r26, 0x45	; 69
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e5 e4       	ldi	r30, 0x45	; 69
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	82 60       	ori	r24, 0x02	; 2
    2c8a:	8c 93       	st	X, r24
}
    2c8c:	0f 90       	pop	r0
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <MTMR_TMR2CompareMatchValue>:

u8 MTMR_TMR2CompareMatchValue(u8 Copy_u8CompareMatchValue2){
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	00 d0       	rcall	.+0      	; 0x2c9a <MTMR_TMR2CompareMatchValue+0x6>
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	89 83       	std	Y+1, r24	; 0x01
	MTMR_U8_OCR2_REG = Copy_u8CompareMatchValue2;
    2ca0:	e3 e4       	ldi	r30, 0x43	; 67
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	80 83       	st	Z, r24
}
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <MTMR_TIMER2_Disable>:
void MTMR_TIMER2_Disable(void){
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
	MTMR_U8_TCCR2_REG |= 0b00000000;
    2cba:	e5 e4       	ldi	r30, 0x45	; 69
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	a5 e4       	ldi	r26, 0x45	; 69
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	8c 91       	ld	r24, X
    2cc4:	80 83       	st	Z, r24
}
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <MUART_voidInit>:
#include "MUART_Interface.h"
#include "MUART_Private.h"

static void (*MUART_PF_Notification)(void) = STD_TYPE_NULL;
static u8 *MUART_Pu8TxString = STD_TYPE_NULL;
u8 MUART_voidInit(void){
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	00 d0       	rcall	.+0      	; 0x2cd2 <MUART_voidInit+0x6>
    2cd2:	00 d0       	rcall	.+0      	; 0x2cd4 <MUART_voidInit+0x8>
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
	u8 Copy_UCSRC = 0b10000000;
    2cd8:	80 e8       	ldi	r24, 0x80	; 128
    2cda:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_UBRR = 51;
    2cdc:	83 e3       	ldi	r24, 0x33	; 51
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9a 83       	std	Y+2, r25	; 0x02
    2ce2:	89 83       	std	Y+1, r24	; 0x01
	/*Normal speed divisor =16 not 8*/
	CLEAR_BIT(MUART__U8_UCSRA_REG , 1);
    2ce4:	ab e2       	ldi	r26, 0x2B	; 43
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	eb e2       	ldi	r30, 0x2B	; 43
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	8d 7f       	andi	r24, 0xFD	; 253
    2cf0:	8c 93       	st	X, r24
	/*Enable Tx,Rx*/
	SET_BIT(MUART__U8_UCSRB_REG , 3);
    2cf2:	aa e2       	ldi	r26, 0x2A	; 42
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	ea e2       	ldi	r30, 0x2A	; 42
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	88 60       	ori	r24, 0x08	; 8
    2cfe:	8c 93       	st	X, r24
	SET_BIT(MUART__U8_UCSRB_REG , 4);
    2d00:	aa e2       	ldi	r26, 0x2A	; 42
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	ea e2       	ldi	r30, 0x2A	; 42
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	80 61       	ori	r24, 0x10	; 16
    2d0c:	8c 93       	st	X, r24
	/*Set data bit size ==>8bits*/
	CLEAR_BIT(MUART__U8_UCSRB_REG , 2);
    2d0e:	aa e2       	ldi	r26, 0x2A	; 42
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	ea e2       	ldi	r30, 0x2A	; 42
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	8b 7f       	andi	r24, 0xFB	; 251
    2d1a:	8c 93       	st	X, r24
	SET_BIT(Copy_UCSRC , 2);
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	84 60       	ori	r24, 0x04	; 4
    2d20:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Copy_UCSRC , 1);
    2d22:	8b 81       	ldd	r24, Y+3	; 0x03
    2d24:	82 60       	ori	r24, 0x02	; 2
    2d26:	8b 83       	std	Y+3, r24	; 0x03
	/*Stop bits ==> 2-bits*/
	SET_BIT(Copy_UCSRC , 3);
    2d28:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2a:	88 60       	ori	r24, 0x08	; 8
    2d2c:	8b 83       	std	Y+3, r24	; 0x03
	/*Set UCSRC register value*/
	MUART__U8_UCSRC_REG = Copy_UCSRC;
    2d2e:	e0 e4       	ldi	r30, 0x40	; 64
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	8b 81       	ldd	r24, Y+3	; 0x03
    2d34:	80 83       	st	Z, r24
	/*Set baud rate*/
	MUART__U8_UBRRL_REG = ( u8)Copy_UBRR;
    2d36:	e9 e2       	ldi	r30, 0x29	; 41
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	80 83       	st	Z, r24
	MUART__U8_UBRRH_REG = ( u8)(Copy_UBRR>>8);
    2d3e:	e0 e4       	ldi	r30, 0x40	; 64
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	9a 81       	ldd	r25, Y+2	; 0x02
    2d46:	89 2f       	mov	r24, r25
    2d48:	99 27       	eor	r25, r25
    2d4a:	80 83       	st	Z, r24
}
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	08 95       	ret

00002d5a <MUART_voidRecieveByte>:

u8 MUART_voidRecieveByte(void){
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	0f 92       	push	r0
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	0b c0       	rjmp	.+22     	; 0x2d7c <MUART_voidRecieveByte+0x22>
	u8 SWITCH;
	while(!GET_BIT(MUART__U8_UCSRA_REG , 7)){
		MDIO_u8GetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_5 , &SWITCH);
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	65 e0       	ldi	r22, 0x05	; 5
    2d6a:	9e 01       	movw	r18, r28
    2d6c:	2f 5f       	subi	r18, 0xFF	; 255
    2d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d70:	a9 01       	movw	r20, r18
    2d72:	0e 94 34 10 	call	0x2068	; 0x2068 <MDIO_u8GetPinValue>
		if(SWITCH == MDIO_U8_HIGH)
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	81 30       	cpi	r24, 0x01	; 1
    2d7a:	29 f0       	breq	.+10     	; 0x2d86 <MUART_voidRecieveByte+0x2c>
	MUART__U8_UBRRH_REG = ( u8)(Copy_UBRR>>8);
}

u8 MUART_voidRecieveByte(void){
	u8 SWITCH;
	while(!GET_BIT(MUART__U8_UCSRA_REG , 7)){
    2d7c:	eb e2       	ldi	r30, 0x2B	; 43
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	88 23       	and	r24, r24
    2d84:	84 f7       	brge	.-32     	; 0x2d66 <MUART_voidRecieveByte+0xc>
		MDIO_u8GetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_5 , &SWITCH);
		if(SWITCH == MDIO_U8_HIGH)
			break;
	}
	/*Write datat to Tx buffer*/
	return MUART__U8_UDR_REG;
    2d86:	ec e2       	ldi	r30, 0x2C	; 44
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
}
    2d8c:	0f 90       	pop	r0
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	08 95       	ret

00002d94 <MUART_voidSendByte>:

u8 MUART_voidSendByte(u8 Copy_u8TxByte){
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <MUART_voidSendByte+0x6>
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(MUART__U8_UCSRA_REG , 5));
    2da0:	eb e2       	ldi	r30, 0x2B	; 43
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	82 95       	swap	r24
    2da8:	86 95       	lsr	r24
    2daa:	87 70       	andi	r24, 0x07	; 7
    2dac:	88 2f       	mov	r24, r24
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	81 70       	andi	r24, 0x01	; 1
    2db2:	90 70       	andi	r25, 0x00	; 0
    2db4:	00 97       	sbiw	r24, 0x00	; 0
    2db6:	a1 f3       	breq	.-24     	; 0x2da0 <MUART_voidSendByte+0xc>
	/*Write data to Tx buffer*/
	MUART__U8_UDR_REG = Copy_u8TxByte;
    2db8:	ec e2       	ldi	r30, 0x2C	; 44
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	80 83       	st	Z, r24
}
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <MUART_u8SendString_synch>:
u8 MUART_u8SendString_synch(u8 *Copy_Pu8TxString){
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <MUART_u8SendString_synch+0x6>
    2dd0:	0f 92       	push	r0
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	9b 83       	std	Y+3, r25	; 0x03
    2dd8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_errprState=STD_TYPES_OK;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8TxString != STD_TYPE_NULL){
    2dde:	8a 81       	ldd	r24, Y+2	; 0x02
    2de0:	9b 81       	ldd	r25, Y+3	; 0x03
    2de2:	00 97       	sbiw	r24, 0x00	; 0
    2de4:	89 f0       	breq	.+34     	; 0x2e08 <MUART_u8SendString_synch+0x3e>
    2de6:	0a c0       	rjmp	.+20     	; 0x2dfc <MUART_u8SendString_synch+0x32>
		while(*Copy_Pu8TxString){
			MUART_voidSendByte(*Copy_Pu8TxString);
    2de8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dea:	fb 81       	ldd	r31, Y+3	; 0x03
    2dec:	80 81       	ld	r24, Z
    2dee:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <MUART_voidSendByte>
			Copy_Pu8TxString++;
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	9b 81       	ldd	r25, Y+3	; 0x03
    2df6:	01 96       	adiw	r24, 0x01	; 1
    2df8:	9b 83       	std	Y+3, r25	; 0x03
    2dfa:	8a 83       	std	Y+2, r24	; 0x02
	MUART__U8_UDR_REG = Copy_u8TxByte;
}
u8 MUART_u8SendString_synch(u8 *Copy_Pu8TxString){
	u8 Local_errprState=STD_TYPES_OK;
	if(Copy_Pu8TxString != STD_TYPE_NULL){
		while(*Copy_Pu8TxString){
    2dfc:	ea 81       	ldd	r30, Y+2	; 0x02
    2dfe:	fb 81       	ldd	r31, Y+3	; 0x03
    2e00:	80 81       	ld	r24, Z
    2e02:	88 23       	and	r24, r24
    2e04:	89 f7       	brne	.-30     	; 0x2de8 <MUART_u8SendString_synch+0x1e>
    2e06:	01 c0       	rjmp	.+2      	; 0x2e0a <MUART_u8SendString_synch+0x40>
			MUART_voidSendByte(*Copy_Pu8TxString);
			Copy_Pu8TxString++;
		}
	}else{
		Local_errprState = STD_TYPES_NOK;
    2e08:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_errprState;
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	cf 91       	pop	r28
    2e14:	df 91       	pop	r29
    2e16:	08 95       	ret

00002e18 <MUART_u8SendString_Asynch>:

u8 MUART_u8SendString_Asynch(u8 *Copy_Pu8TxString , void(*Copy_pNotification)(void)){
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <MUART_u8SendString_Asynch+0x6>
    2e1e:	00 d0       	rcall	.+0      	; 0x2e20 <MUART_u8SendString_Asynch+0x8>
    2e20:	0f 92       	push	r0
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
    2e26:	9b 83       	std	Y+3, r25	; 0x03
    2e28:	8a 83       	std	Y+2, r24	; 0x02
    2e2a:	7d 83       	std	Y+5, r23	; 0x05
    2e2c:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_errprState=STD_TYPES_OK;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8TxString != STD_TYPE_NULL && Copy_pNotification !=STD_TYPE_NULL){
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	9b 81       	ldd	r25, Y+3	; 0x03
    2e36:	00 97       	sbiw	r24, 0x00	; 0
    2e38:	c1 f0       	breq	.+48     	; 0x2e6a <MUART_u8SendString_Asynch+0x52>
    2e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e3e:	00 97       	sbiw	r24, 0x00	; 0
    2e40:	a1 f0       	breq	.+40     	; 0x2e6a <MUART_u8SendString_Asynch+0x52>
		/*update global pointer*/
		MUART_PF_Notification = Copy_pNotification;
    2e42:	8c 81       	ldd	r24, Y+4	; 0x04
    2e44:	9d 81       	ldd	r25, Y+5	; 0x05
    2e46:	90 93 f2 00 	sts	0x00F2, r25
    2e4a:	80 93 f1 00 	sts	0x00F1, r24
		MUART_Pu8TxString = Copy_Pu8TxString;
    2e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e50:	9b 81       	ldd	r25, Y+3	; 0x03
    2e52:	90 93 f4 00 	sts	0x00F4, r25
    2e56:	80 93 f3 00 	sts	0x00F3, r24
		/*Enable Data Register Empty Interrupt */
		SET_BIT(MUART__U8_UCSRB_REG , 5);
    2e5a:	aa e2       	ldi	r26, 0x2A	; 42
    2e5c:	b0 e0       	ldi	r27, 0x00	; 0
    2e5e:	ea e2       	ldi	r30, 0x2A	; 42
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	80 62       	ori	r24, 0x20	; 32
    2e66:	8c 93       	st	X, r24
    2e68:	01 c0       	rjmp	.+2      	; 0x2e6c <MUART_u8SendString_Asynch+0x54>
	}else{
		Local_errprState = STD_TYPES_NOK;
    2e6a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_errprState;
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e6e:	0f 90       	pop	r0
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <__vector_14>:

void __vector_14(void)__attribute__((signal));
void __vector_14(void){
    2e7e:	1f 92       	push	r1
    2e80:	0f 92       	push	r0
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	0f 92       	push	r0
    2e86:	11 24       	eor	r1, r1
    2e88:	2f 93       	push	r18
    2e8a:	3f 93       	push	r19
    2e8c:	4f 93       	push	r20
    2e8e:	5f 93       	push	r21
    2e90:	6f 93       	push	r22
    2e92:	7f 93       	push	r23
    2e94:	8f 93       	push	r24
    2e96:	9f 93       	push	r25
    2e98:	af 93       	push	r26
    2e9a:	bf 93       	push	r27
    2e9c:	ef 93       	push	r30
    2e9e:	ff 93       	push	r31
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter =0;
	MUART_voidSendByte(MUART_Pu8TxString[Local_u8Counter]);
    2ea8:	20 91 f3 00 	lds	r18, 0x00F3
    2eac:	30 91 f4 00 	lds	r19, 0x00F4
    2eb0:	80 91 f5 00 	lds	r24, 0x00F5
    2eb4:	88 2f       	mov	r24, r24
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	f9 01       	movw	r30, r18
    2eba:	e8 0f       	add	r30, r24
    2ebc:	f9 1f       	adc	r31, r25
    2ebe:	80 81       	ld	r24, Z
    2ec0:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <MUART_voidSendByte>
	Local_u8Counter++;
    2ec4:	80 91 f5 00 	lds	r24, 0x00F5
    2ec8:	8f 5f       	subi	r24, 0xFF	; 255
    2eca:	80 93 f5 00 	sts	0x00F5, r24
	if(MUART_Pu8TxString[Local_u8Counter] =='\0'){
    2ece:	20 91 f3 00 	lds	r18, 0x00F3
    2ed2:	30 91 f4 00 	lds	r19, 0x00F4
    2ed6:	80 91 f5 00 	lds	r24, 0x00F5
    2eda:	88 2f       	mov	r24, r24
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	f9 01       	movw	r30, r18
    2ee0:	e8 0f       	add	r30, r24
    2ee2:	f9 1f       	adc	r31, r25
    2ee4:	80 81       	ld	r24, Z
    2ee6:	88 23       	and	r24, r24
    2ee8:	71 f4       	brne	.+28     	; 0x2f06 <__vector_14+0x88>
		/*Disable interrupt*/
		CLEAR_BIT(MUART__U8_UCSRB_REG , 5);
    2eea:	aa e2       	ldi	r26, 0x2A	; 42
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	ea e2       	ldi	r30, 0x2A	; 42
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	8f 7d       	andi	r24, 0xDF	; 223
    2ef6:	8c 93       	st	X, r24
		Local_u8Counter =0;
    2ef8:	10 92 f5 00 	sts	0x00F5, r1
		MUART_PF_Notification();
    2efc:	e0 91 f1 00 	lds	r30, 0x00F1
    2f00:	f0 91 f2 00 	lds	r31, 0x00F2
    2f04:	09 95       	icall
	}
}
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	ff 91       	pop	r31
    2f0c:	ef 91       	pop	r30
    2f0e:	bf 91       	pop	r27
    2f10:	af 91       	pop	r26
    2f12:	9f 91       	pop	r25
    2f14:	8f 91       	pop	r24
    2f16:	7f 91       	pop	r23
    2f18:	6f 91       	pop	r22
    2f1a:	5f 91       	pop	r21
    2f1c:	4f 91       	pop	r20
    2f1e:	3f 91       	pop	r19
    2f20:	2f 91       	pop	r18
    2f22:	0f 90       	pop	r0
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	0f 90       	pop	r0
    2f28:	1f 90       	pop	r1
    2f2a:	18 95       	reti

00002f2c <main>:
#include "MOTORS_Interface.h"
#define F_CPU	8000000UL
#include <avr/delay.h>
#define MEXTI_U8_SREG_REG		*((volatile u8*)0X5F)

int main(void){
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	ef 97       	sbiw	r28, 0x3f	; 63
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(MEXTI_U8_SREG_REG,7);
    2f40:	af e5       	ldi	r26, 0x5F	; 95
    2f42:	b0 e0       	ldi	r27, 0x00	; 0
    2f44:	ef e5       	ldi	r30, 0x5F	; 95
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	80 81       	ld	r24, Z
    2f4a:	80 68       	ori	r24, 0x80	; 128
    2f4c:	8c 93       	st	X, r24
	MDIO_U8INIT();
    2f4e:	0e 94 42 12 	call	0x2484	; 0x2484 <MDIO_U8INIT>
	HLCD_U8Init();
    2f52:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_U8Init>
	MTMR_TIMER0_INIT();
    2f56:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <MTMR_TIMER0_INIT>
	MTMR_TIMER2_INIT();
    2f5a:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <MTMR_TIMER2_INIT>
	HICU_init();
    2f5e:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <HICU_init>
	MUART_voidInit();
    2f62:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <MUART_voidInit>
	u16 Ton=0 ;
    2f66:	1c ae       	std	Y+60, r1	; 0x3c
    2f68:	1b ae       	std	Y+59, r1	; 0x3b
	u8  Left_IR , Right_IR;
	u8 Speed=220;
    2f6a:	8c ed       	ldi	r24, 0xDC	; 220
    2f6c:	8a af       	std	Y+58, r24	; 0x3a
	u8 CH='S',SWITCH;
    2f6e:	83 e5       	ldi	r24, 0x53	; 83
    2f70:	89 af       	std	Y+57, r24	; 0x39

	while(1){
		MDIO_u8GetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_5 , &SWITCH);
    2f72:	9e 01       	movw	r18, r28
    2f74:	21 5c       	subi	r18, 0xC1	; 193
    2f76:	3f 4f       	sbci	r19, 0xFF	; 255
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	65 e0       	ldi	r22, 0x05	; 5
    2f7c:	a9 01       	movw	r20, r18
    2f7e:	0e 94 34 10 	call	0x2068	; 0x2068 <MDIO_u8GetPinValue>
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	a0 ea       	ldi	r26, 0xA0	; 160
    2f88:	b1 e4       	ldi	r27, 0x41	; 65
    2f8a:	8d ab       	std	Y+53, r24	; 0x35
    2f8c:	9e ab       	std	Y+54, r25	; 0x36
    2f8e:	af ab       	std	Y+55, r26	; 0x37
    2f90:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f92:	6d a9       	ldd	r22, Y+53	; 0x35
    2f94:	7e a9       	ldd	r23, Y+54	; 0x36
    2f96:	8f a9       	ldd	r24, Y+55	; 0x37
    2f98:	98 ad       	ldd	r25, Y+56	; 0x38
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	4a ef       	ldi	r20, 0xFA	; 250
    2fa0:	54 e4       	ldi	r21, 0x44	; 68
    2fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	89 ab       	std	Y+49, r24	; 0x31
    2fac:	9a ab       	std	Y+50, r25	; 0x32
    2fae:	ab ab       	std	Y+51, r26	; 0x33
    2fb0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fb2:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb4:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb6:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb8:	9c a9       	ldd	r25, Y+52	; 0x34
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e8       	ldi	r20, 0x80	; 128
    2fc0:	5f e3       	ldi	r21, 0x3F	; 63
    2fc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc6:	88 23       	and	r24, r24
    2fc8:	2c f4       	brge	.+10     	; 0x2fd4 <main+0xa8>
		__ticks = 1;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	98 ab       	std	Y+48, r25	; 0x30
    2fd0:	8f a7       	std	Y+47, r24	; 0x2f
    2fd2:	3f c0       	rjmp	.+126    	; 0x3052 <main+0x126>
	else if (__tmp > 65535)
    2fd4:	69 a9       	ldd	r22, Y+49	; 0x31
    2fd6:	7a a9       	ldd	r23, Y+50	; 0x32
    2fd8:	8b a9       	ldd	r24, Y+51	; 0x33
    2fda:	9c a9       	ldd	r25, Y+52	; 0x34
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	3f ef       	ldi	r19, 0xFF	; 255
    2fe0:	4f e7       	ldi	r20, 0x7F	; 127
    2fe2:	57 e4       	ldi	r21, 0x47	; 71
    2fe4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe8:	18 16       	cp	r1, r24
    2fea:	4c f5       	brge	.+82     	; 0x303e <main+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fec:	6d a9       	ldd	r22, Y+53	; 0x35
    2fee:	7e a9       	ldd	r23, Y+54	; 0x36
    2ff0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ff2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e2       	ldi	r20, 0x20	; 32
    2ffa:	51 e4       	ldi	r21, 0x41	; 65
    2ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	bc 01       	movw	r22, r24
    3006:	cd 01       	movw	r24, r26
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	98 ab       	std	Y+48, r25	; 0x30
    3012:	8f a7       	std	Y+47, r24	; 0x2f
    3014:	0f c0       	rjmp	.+30     	; 0x3034 <main+0x108>
    3016:	88 ec       	ldi	r24, 0xC8	; 200
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	9e a7       	std	Y+46, r25	; 0x2e
    301c:	8d a7       	std	Y+45, r24	; 0x2d
    301e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3020:	9e a5       	ldd	r25, Y+46	; 0x2e
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <main+0xf6>
    3026:	9e a7       	std	Y+46, r25	; 0x2e
    3028:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    302a:	8f a5       	ldd	r24, Y+47	; 0x2f
    302c:	98 a9       	ldd	r25, Y+48	; 0x30
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	98 ab       	std	Y+48, r25	; 0x30
    3032:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3034:	8f a5       	ldd	r24, Y+47	; 0x2f
    3036:	98 a9       	ldd	r25, Y+48	; 0x30
    3038:	00 97       	sbiw	r24, 0x00	; 0
    303a:	69 f7       	brne	.-38     	; 0x3016 <main+0xea>
    303c:	14 c0       	rjmp	.+40     	; 0x3066 <main+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303e:	69 a9       	ldd	r22, Y+49	; 0x31
    3040:	7a a9       	ldd	r23, Y+50	; 0x32
    3042:	8b a9       	ldd	r24, Y+51	; 0x33
    3044:	9c a9       	ldd	r25, Y+52	; 0x34
    3046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	98 ab       	std	Y+48, r25	; 0x30
    3050:	8f a7       	std	Y+47, r24	; 0x2f
    3052:	8f a5       	ldd	r24, Y+47	; 0x2f
    3054:	98 a9       	ldd	r25, Y+48	; 0x30
    3056:	9c a7       	std	Y+44, r25	; 0x2c
    3058:	8b a7       	std	Y+43, r24	; 0x2b
    305a:	8b a5       	ldd	r24, Y+43	; 0x2b
    305c:	9c a5       	ldd	r25, Y+44	; 0x2c
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <main+0x132>
    3062:	9c a7       	std	Y+44, r25	; 0x2c
    3064:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);
		/*______  LINE FOLLOWER MOoOoDE   ______*/
		if(SWITCH == MDIO_U8_HIGH){
    3066:	8f ad       	ldd	r24, Y+63	; 0x3f
    3068:	81 30       	cpi	r24, 0x01	; 1
    306a:	09 f0       	breq	.+2      	; 0x306e <main+0x142>
    306c:	f6 c0       	rjmp	.+492    	; 0x325a <main+0x32e>
			HLCD_U8SetCursor(0,0);HLCD_U8WriteString("LINE FOLLOWER");
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	60 e0       	ldi	r22, 0x00	; 0
    3072:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
    3076:	8f e6       	ldi	r24, 0x6F	; 111
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	90 e8       	ldi	r25, 0x80	; 128
    3082:	ab e3       	ldi	r26, 0x3B	; 59
    3084:	b5 e4       	ldi	r27, 0x45	; 69
    3086:	8f a3       	std	Y+39, r24	; 0x27
    3088:	98 a7       	std	Y+40, r25	; 0x28
    308a:	a9 a7       	std	Y+41, r26	; 0x29
    308c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    308e:	6f a1       	ldd	r22, Y+39	; 0x27
    3090:	78 a5       	ldd	r23, Y+40	; 0x28
    3092:	89 a5       	ldd	r24, Y+41	; 0x29
    3094:	9a a5       	ldd	r25, Y+42	; 0x2a
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	4a ef       	ldi	r20, 0xFA	; 250
    309c:	54 e4       	ldi	r21, 0x44	; 68
    309e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	8b a3       	std	Y+35, r24	; 0x23
    30a8:	9c a3       	std	Y+36, r25	; 0x24
    30aa:	ad a3       	std	Y+37, r26	; 0x25
    30ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30ae:	6b a1       	ldd	r22, Y+35	; 0x23
    30b0:	7c a1       	ldd	r23, Y+36	; 0x24
    30b2:	8d a1       	ldd	r24, Y+37	; 0x25
    30b4:	9e a1       	ldd	r25, Y+38	; 0x26
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e8       	ldi	r20, 0x80	; 128
    30bc:	5f e3       	ldi	r21, 0x3F	; 63
    30be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c2:	88 23       	and	r24, r24
    30c4:	2c f4       	brge	.+10     	; 0x30d0 <main+0x1a4>
		__ticks = 1;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	9a a3       	std	Y+34, r25	; 0x22
    30cc:	89 a3       	std	Y+33, r24	; 0x21
    30ce:	3f c0       	rjmp	.+126    	; 0x314e <main+0x222>
	else if (__tmp > 65535)
    30d0:	6b a1       	ldd	r22, Y+35	; 0x23
    30d2:	7c a1       	ldd	r23, Y+36	; 0x24
    30d4:	8d a1       	ldd	r24, Y+37	; 0x25
    30d6:	9e a1       	ldd	r25, Y+38	; 0x26
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	3f ef       	ldi	r19, 0xFF	; 255
    30dc:	4f e7       	ldi	r20, 0x7F	; 127
    30de:	57 e4       	ldi	r21, 0x47	; 71
    30e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30e4:	18 16       	cp	r1, r24
    30e6:	4c f5       	brge	.+82     	; 0x313a <main+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e8:	6f a1       	ldd	r22, Y+39	; 0x27
    30ea:	78 a5       	ldd	r23, Y+40	; 0x28
    30ec:	89 a5       	ldd	r24, Y+41	; 0x29
    30ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	40 e2       	ldi	r20, 0x20	; 32
    30f6:	51 e4       	ldi	r21, 0x41	; 65
    30f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	bc 01       	movw	r22, r24
    3102:	cd 01       	movw	r24, r26
    3104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	9a a3       	std	Y+34, r25	; 0x22
    310e:	89 a3       	std	Y+33, r24	; 0x21
    3110:	0f c0       	rjmp	.+30     	; 0x3130 <main+0x204>
    3112:	88 ec       	ldi	r24, 0xC8	; 200
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	98 a3       	std	Y+32, r25	; 0x20
    3118:	8f 8f       	std	Y+31, r24	; 0x1f
    311a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    311c:	98 a1       	ldd	r25, Y+32	; 0x20
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	f1 f7       	brne	.-4      	; 0x311e <main+0x1f2>
    3122:	98 a3       	std	Y+32, r25	; 0x20
    3124:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3126:	89 a1       	ldd	r24, Y+33	; 0x21
    3128:	9a a1       	ldd	r25, Y+34	; 0x22
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	9a a3       	std	Y+34, r25	; 0x22
    312e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3130:	89 a1       	ldd	r24, Y+33	; 0x21
    3132:	9a a1       	ldd	r25, Y+34	; 0x22
    3134:	00 97       	sbiw	r24, 0x00	; 0
    3136:	69 f7       	brne	.-38     	; 0x3112 <main+0x1e6>
    3138:	14 c0       	rjmp	.+40     	; 0x3162 <main+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313a:	6b a1       	ldd	r22, Y+35	; 0x23
    313c:	7c a1       	ldd	r23, Y+36	; 0x24
    313e:	8d a1       	ldd	r24, Y+37	; 0x25
    3140:	9e a1       	ldd	r25, Y+38	; 0x26
    3142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	9a a3       	std	Y+34, r25	; 0x22
    314c:	89 a3       	std	Y+33, r24	; 0x21
    314e:	89 a1       	ldd	r24, Y+33	; 0x21
    3150:	9a a1       	ldd	r25, Y+34	; 0x22
    3152:	9e 8f       	std	Y+30, r25	; 0x1e
    3154:	8d 8f       	std	Y+29, r24	; 0x1d
    3156:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3158:	9e 8d       	ldd	r25, Y+30	; 0x1e
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	f1 f7       	brne	.-4      	; 0x315a <main+0x22e>
    315e:	9e 8f       	std	Y+30, r25	; 0x1e
    3160:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(3000);
			HLCD_U8ClearLCD();
    3162:	0e 94 18 0b 	call	0x1630	; 0x1630 <HLCD_U8ClearLCD>
			while(1){
				/* Ultrasonic sensor */
				HultraSonic_viodSendPulse(MDIO_U8_PORTB , MDIO_U8_PIN_4);
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	64 e0       	ldi	r22, 0x04	; 4
    316a:	0e 94 28 0c 	call	0x1850	; 0x1850 <HultraSonic_viodSendPulse>
				Ton = HICU_GET_PWM_ON_Period();
    316e:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <HICU_GET_PWM_ON_Period>
    3172:	9c af       	std	Y+60, r25	; 0x3c
    3174:	8b af       	std	Y+59, r24	; 0x3b
				Ton=Ton/444; //to be in CMs
    3176:	8b ad       	ldd	r24, Y+59	; 0x3b
    3178:	9c ad       	ldd	r25, Y+60	; 0x3c
    317a:	2c eb       	ldi	r18, 0xBC	; 188
    317c:	31 e0       	ldi	r19, 0x01	; 1
    317e:	b9 01       	movw	r22, r18
    3180:	0e 94 ab 1a 	call	0x3556	; 0x3556 <__udivmodhi4>
    3184:	cb 01       	movw	r24, r22
    3186:	9c af       	std	Y+60, r25	; 0x3c
    3188:	8b af       	std	Y+59, r24	; 0x3b
				HultraSonic_voidDisplayDistance(Ton);
    318a:	8b ad       	ldd	r24, Y+59	; 0x3b
    318c:	9c ad       	ldd	r25, Y+60	; 0x3c
    318e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <HultraSonic_voidDisplayDistance>
				/* BUZZER & IRs */
				MDIO_u8GetPinValue(MDIO_U8_PORTB , MDIO_U8_PIN_6 , &Left_IR);
    3192:	9e 01       	movw	r18, r28
    3194:	23 5c       	subi	r18, 0xC3	; 195
    3196:	3f 4f       	sbci	r19, 0xFF	; 255
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	66 e0       	ldi	r22, 0x06	; 6
    319c:	a9 01       	movw	r20, r18
    319e:	0e 94 34 10 	call	0x2068	; 0x2068 <MDIO_u8GetPinValue>
				MDIO_u8GetPinValue(MDIO_U8_PORTB , MDIO_U8_PIN_7 , &Right_IR);
    31a2:	9e 01       	movw	r18, r28
    31a4:	22 5c       	subi	r18, 0xC2	; 194
    31a6:	3f 4f       	sbci	r19, 0xFF	; 255
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	67 e0       	ldi	r22, 0x07	; 7
    31ac:	a9 01       	movw	r20, r18
    31ae:	0e 94 34 10 	call	0x2068	; 0x2068 <MDIO_u8GetPinValue>
				if( Ton <= 15){
    31b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    31b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    31b6:	80 31       	cpi	r24, 0x10	; 16
    31b8:	91 05       	cpc	r25, r1
    31ba:	80 f4       	brcc	.+32     	; 0x31dc <main+0x2b0>
					MDIO_u8SetPinValue(MDIO_U8_PORTB , MDIO_U8_PIN_5 , MDIO_U8_HIGH);
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	65 e0       	ldi	r22, 0x05	; 5
    31c0:	41 e0       	ldi	r20, 0x01	; 1
    31c2:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
					HLCD_U8SetCursor(1,2);
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	62 e0       	ldi	r22, 0x02	; 2
    31ca:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
					HLCD_U8WriteString("OBSTACLE !!!");
    31ce:	8d e7       	ldi	r24, 0x7D	; 125
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
					MOTORS_Stop();
    31d6:	0e 94 c6 13 	call	0x278c	; 0x278c <MOTORS_Stop>
    31da:	32 c0       	rjmp	.+100    	; 0x3240 <main+0x314>
				}else if(Ton > 15 && Ton <120){
    31dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    31de:	9c ad       	ldd	r25, Y+60	; 0x3c
    31e0:	80 31       	cpi	r24, 0x10	; 16
    31e2:	91 05       	cpc	r25, r1
    31e4:	68 f1       	brcs	.+90     	; 0x3240 <main+0x314>
    31e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    31e8:	9c ad       	ldd	r25, Y+60	; 0x3c
    31ea:	88 37       	cpi	r24, 0x78	; 120
    31ec:	91 05       	cpc	r25, r1
    31ee:	40 f5       	brcc	.+80     	; 0x3240 <main+0x314>
					MDIO_u8SetPinValue(MDIO_U8_PORTB , MDIO_U8_PIN_5 , MDIO_U8_LOW);
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	65 e0       	ldi	r22, 0x05	; 5
    31f4:	40 e0       	ldi	r20, 0x00	; 0
    31f6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MDIO_u8SetPinValue>
					HLCD_U8SetCursor(1,2);
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	62 e0       	ldi	r22, 0x02	; 2
    31fe:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
					HLCD_U8WriteString("            ");
    3202:	8a e8       	ldi	r24, 0x8A	; 138
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
					if(Left_IR == MDIO_U8_LOW && Right_IR == MDIO_U8_LOW){
    320a:	8d ad       	ldd	r24, Y+61	; 0x3d
    320c:	88 23       	and	r24, r24
    320e:	39 f4       	brne	.+14     	; 0x321e <main+0x2f2>
    3210:	8e ad       	ldd	r24, Y+62	; 0x3e
    3212:	88 23       	and	r24, r24
    3214:	21 f4       	brne	.+8      	; 0x321e <main+0x2f2>
						MOTORS_Forward(Speed);
    3216:	8a ad       	ldd	r24, Y+58	; 0x3a
    3218:	0e 94 67 12 	call	0x24ce	; 0x24ce <MOTORS_Forward>
    321c:	11 c0       	rjmp	.+34     	; 0x3240 <main+0x314>
					}
					else if(Left_IR == MDIO_U8_LOW && Right_IR == MDIO_U8_HIGH){
    321e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3220:	88 23       	and	r24, r24
    3222:	31 f4       	brne	.+12     	; 0x3230 <main+0x304>
    3224:	8e ad       	ldd	r24, Y+62	; 0x3e
    3226:	81 30       	cpi	r24, 0x01	; 1
    3228:	19 f4       	brne	.+6      	; 0x3230 <main+0x304>
						MOTORS_Left();
    322a:	0e 94 2f 13 	call	0x265e	; 0x265e <MOTORS_Left>
    322e:	08 c0       	rjmp	.+16     	; 0x3240 <main+0x314>
					}
					else if(Left_IR == MDIO_U8_HIGH && Right_IR == MDIO_U8_LOW){
    3230:	8d ad       	ldd	r24, Y+61	; 0x3d
    3232:	81 30       	cpi	r24, 0x01	; 1
    3234:	29 f4       	brne	.+10     	; 0x3240 <main+0x314>
    3236:	8e ad       	ldd	r24, Y+62	; 0x3e
    3238:	88 23       	and	r24, r24
    323a:	11 f4       	brne	.+4      	; 0x3240 <main+0x314>
						MOTORS_Right();
    323c:	0e 94 98 12 	call	0x2530	; 0x2530 <MOTORS_Right>
					}
				}
				MDIO_u8GetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_5 , &SWITCH);
    3240:	9e 01       	movw	r18, r28
    3242:	21 5c       	subi	r18, 0xC1	; 193
    3244:	3f 4f       	sbci	r19, 0xFF	; 255
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	65 e0       	ldi	r22, 0x05	; 5
    324a:	a9 01       	movw	r20, r18
    324c:	0e 94 34 10 	call	0x2068	; 0x2068 <MDIO_u8GetPinValue>
				if(SWITCH == MDIO_U8_LOW)
    3250:	8f ad       	ldd	r24, Y+63	; 0x3f
    3252:	88 23       	and	r24, r24
    3254:	09 f4       	brne	.+2      	; 0x3258 <main+0x32c>
    3256:	7c c1       	rjmp	.+760    	; 0x3550 <main+0x624>
    3258:	86 cf       	rjmp	.-244    	; 0x3166 <main+0x23a>
					break;
			}
		}
		/*_____  BLUETOOTH CONROLLED CAR MODE  _____*/
		else if(SWITCH == MDIO_U8_LOW){
    325a:	8f ad       	ldd	r24, Y+63	; 0x3f
    325c:	88 23       	and	r24, r24
    325e:	09 f0       	breq	.+2      	; 0x3262 <main+0x336>
    3260:	77 c1       	rjmp	.+750    	; 0x3550 <main+0x624>
			HLCD_U8SetCursor(0,0);HLCD_U8WriteString("BLUETOOTH MODE");
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	60 e0       	ldi	r22, 0x00	; 0
    3266:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
    326a:	87 e9       	ldi	r24, 0x97	; 151
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	90 e8       	ldi	r25, 0x80	; 128
    3276:	ab e3       	ldi	r26, 0x3B	; 59
    3278:	b5 e4       	ldi	r27, 0x45	; 69
    327a:	89 8f       	std	Y+25, r24	; 0x19
    327c:	9a 8f       	std	Y+26, r25	; 0x1a
    327e:	ab 8f       	std	Y+27, r26	; 0x1b
    3280:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3282:	69 8d       	ldd	r22, Y+25	; 0x19
    3284:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3288:	9c 8d       	ldd	r25, Y+28	; 0x1c
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	4a ef       	ldi	r20, 0xFA	; 250
    3290:	54 e4       	ldi	r21, 0x44	; 68
    3292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	8d 8b       	std	Y+21, r24	; 0x15
    329c:	9e 8b       	std	Y+22, r25	; 0x16
    329e:	af 8b       	std	Y+23, r26	; 0x17
    32a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32a2:	6d 89       	ldd	r22, Y+21	; 0x15
    32a4:	7e 89       	ldd	r23, Y+22	; 0x16
    32a6:	8f 89       	ldd	r24, Y+23	; 0x17
    32a8:	98 8d       	ldd	r25, Y+24	; 0x18
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e8       	ldi	r20, 0x80	; 128
    32b0:	5f e3       	ldi	r21, 0x3F	; 63
    32b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32b6:	88 23       	and	r24, r24
    32b8:	2c f4       	brge	.+10     	; 0x32c4 <main+0x398>
		__ticks = 1;
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	9c 8b       	std	Y+20, r25	; 0x14
    32c0:	8b 8b       	std	Y+19, r24	; 0x13
    32c2:	3f c0       	rjmp	.+126    	; 0x3342 <main+0x416>
	else if (__tmp > 65535)
    32c4:	6d 89       	ldd	r22, Y+21	; 0x15
    32c6:	7e 89       	ldd	r23, Y+22	; 0x16
    32c8:	8f 89       	ldd	r24, Y+23	; 0x17
    32ca:	98 8d       	ldd	r25, Y+24	; 0x18
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	3f ef       	ldi	r19, 0xFF	; 255
    32d0:	4f e7       	ldi	r20, 0x7F	; 127
    32d2:	57 e4       	ldi	r21, 0x47	; 71
    32d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d8:	18 16       	cp	r1, r24
    32da:	4c f5       	brge	.+82     	; 0x332e <main+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32dc:	69 8d       	ldd	r22, Y+25	; 0x19
    32de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	40 e2       	ldi	r20, 0x20	; 32
    32ea:	51 e4       	ldi	r21, 0x41	; 65
    32ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	bc 01       	movw	r22, r24
    32f6:	cd 01       	movw	r24, r26
    32f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	9c 8b       	std	Y+20, r25	; 0x14
    3302:	8b 8b       	std	Y+19, r24	; 0x13
    3304:	0f c0       	rjmp	.+30     	; 0x3324 <main+0x3f8>
    3306:	88 ec       	ldi	r24, 0xC8	; 200
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	9a 8b       	std	Y+18, r25	; 0x12
    330c:	89 8b       	std	Y+17, r24	; 0x11
    330e:	89 89       	ldd	r24, Y+17	; 0x11
    3310:	9a 89       	ldd	r25, Y+18	; 0x12
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <main+0x3e6>
    3316:	9a 8b       	std	Y+18, r25	; 0x12
    3318:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331a:	8b 89       	ldd	r24, Y+19	; 0x13
    331c:	9c 89       	ldd	r25, Y+20	; 0x14
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	9c 8b       	std	Y+20, r25	; 0x14
    3322:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3324:	8b 89       	ldd	r24, Y+19	; 0x13
    3326:	9c 89       	ldd	r25, Y+20	; 0x14
    3328:	00 97       	sbiw	r24, 0x00	; 0
    332a:	69 f7       	brne	.-38     	; 0x3306 <main+0x3da>
    332c:	14 c0       	rjmp	.+40     	; 0x3356 <main+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    332e:	6d 89       	ldd	r22, Y+21	; 0x15
    3330:	7e 89       	ldd	r23, Y+22	; 0x16
    3332:	8f 89       	ldd	r24, Y+23	; 0x17
    3334:	98 8d       	ldd	r25, Y+24	; 0x18
    3336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	9c 8b       	std	Y+20, r25	; 0x14
    3340:	8b 8b       	std	Y+19, r24	; 0x13
    3342:	8b 89       	ldd	r24, Y+19	; 0x13
    3344:	9c 89       	ldd	r25, Y+20	; 0x14
    3346:	98 8b       	std	Y+16, r25	; 0x10
    3348:	8f 87       	std	Y+15, r24	; 0x0f
    334a:	8f 85       	ldd	r24, Y+15	; 0x0f
    334c:	98 89       	ldd	r25, Y+16	; 0x10
    334e:	01 97       	sbiw	r24, 0x01	; 1
    3350:	f1 f7       	brne	.-4      	; 0x334e <main+0x422>
    3352:	98 8b       	std	Y+16, r25	; 0x10
    3354:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(3000);
			HLCD_U8ClearLCD();
    3356:	0e 94 18 0b 	call	0x1630	; 0x1630 <HLCD_U8ClearLCD>
			HLCD_U8SetCursor(0,1);HLCD_U8WriteString("Speed:");
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	61 e0       	ldi	r22, 0x01	; 1
    335e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
    3362:	86 ea       	ldi	r24, 0xA6	; 166
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
			while(1){
				HLCD_U8SetCursor(0,7);HLCD_U8WriteNumber(Speed);
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	67 e0       	ldi	r22, 0x07	; 7
    336e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
    3372:	8a ad       	ldd	r24, Y+58	; 0x3a
    3374:	88 2f       	mov	r24, r24
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <HLCD_U8WriteNumber>
				HLCD_U8SetCursor(0,9);HLCD_U8WriteString(" ");
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	69 e0       	ldi	r22, 0x09	; 9
    3380:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
    3384:	8d ea       	ldi	r24, 0xAD	; 173
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
				if(CH == 'F'){
    338c:	89 ad       	ldd	r24, Y+57	; 0x39
    338e:	86 34       	cpi	r24, 0x46	; 70
    3390:	61 f4       	brne	.+24     	; 0x33aa <main+0x47e>
					MOTORS_Forward(Speed);
    3392:	8a ad       	ldd	r24, Y+58	; 0x3a
    3394:	0e 94 67 12 	call	0x24ce	; 0x24ce <MOTORS_Forward>
					HLCD_U8SetCursor(1,0);HLCD_U8WriteString("Forward ");
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	60 e0       	ldi	r22, 0x00	; 0
    339c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
    33a0:	8f ea       	ldi	r24, 0xAF	; 175
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
    33a8:	52 c0       	rjmp	.+164    	; 0x344e <main+0x522>
				}else if(CH == 'B'){
    33aa:	89 ad       	ldd	r24, Y+57	; 0x39
    33ac:	82 34       	cpi	r24, 0x42	; 66
    33ae:	61 f4       	brne	.+24     	; 0x33c8 <main+0x49c>
					MOTORS_Backward(Speed);
    33b0:	8a ad       	ldd	r24, Y+58	; 0x3a
    33b2:	0e 94 81 12 	call	0x2502	; 0x2502 <MOTORS_Backward>
					HLCD_U8SetCursor(1,0);
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
					HLCD_U8WriteString("Backward");
    33be:	88 eb       	ldi	r24, 0xB8	; 184
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
    33c6:	43 c0       	rjmp	.+134    	; 0x344e <main+0x522>
				}else if(CH == 'R'){
    33c8:	89 ad       	ldd	r24, Y+57	; 0x39
    33ca:	82 35       	cpi	r24, 0x52	; 82
    33cc:	59 f4       	brne	.+22     	; 0x33e4 <main+0x4b8>
					MOTORS_Right();
    33ce:	0e 94 98 12 	call	0x2530	; 0x2530 <MOTORS_Right>
					HLCD_U8SetCursor(1,0);
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	60 e0       	ldi	r22, 0x00	; 0
    33d6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
					HLCD_U8WriteString("Right   ");
    33da:	81 ec       	ldi	r24, 0xC1	; 193
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
    33e2:	35 c0       	rjmp	.+106    	; 0x344e <main+0x522>
				}else if (CH == 'L') {
    33e4:	89 ad       	ldd	r24, Y+57	; 0x39
    33e6:	8c 34       	cpi	r24, 0x4C	; 76
    33e8:	59 f4       	brne	.+22     	; 0x3400 <main+0x4d4>
					MOTORS_Left();
    33ea:	0e 94 2f 13 	call	0x265e	; 0x265e <MOTORS_Left>
					HLCD_U8SetCursor(1,0);
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
					HLCD_U8WriteString("Left    ");
    33f6:	8a ec       	ldi	r24, 0xCA	; 202
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
    33fe:	27 c0       	rjmp	.+78     	; 0x344e <main+0x522>
				}else if(CH == 'S'){
    3400:	89 ad       	ldd	r24, Y+57	; 0x39
    3402:	83 35       	cpi	r24, 0x53	; 83
    3404:	59 f4       	brne	.+22     	; 0x341c <main+0x4f0>
					MOTORS_Stop();
    3406:	0e 94 c6 13 	call	0x278c	; 0x278c <MOTORS_Stop>
					HLCD_U8SetCursor(1,0);
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	60 e0       	ldi	r22, 0x00	; 0
    340e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
					HLCD_U8WriteString("Stop    ");
    3412:	83 ed       	ldi	r24, 0xD3	; 211
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <HLCD_U8WriteString>
    341a:	19 c0       	rjmp	.+50     	; 0x344e <main+0x522>
				}
				else if(CH >= 48 && CH <= 57){
    341c:	89 ad       	ldd	r24, Y+57	; 0x39
    341e:	80 33       	cpi	r24, 0x30	; 48
    3420:	b0 f0       	brcs	.+44     	; 0x344e <main+0x522>
    3422:	89 ad       	ldd	r24, Y+57	; 0x39
    3424:	8a 33       	cpi	r24, 0x3A	; 58
    3426:	98 f4       	brcc	.+38     	; 0x344e <main+0x522>
					Speed = (CH-48)*28;
    3428:	89 ad       	ldd	r24, Y+57	; 0x39
    342a:	88 2f       	mov	r24, r24
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	9c 01       	movw	r18, r24
    3430:	22 0f       	add	r18, r18
    3432:	33 1f       	adc	r19, r19
    3434:	22 0f       	add	r18, r18
    3436:	33 1f       	adc	r19, r19
    3438:	c9 01       	movw	r24, r18
    343a:	88 0f       	add	r24, r24
    343c:	99 1f       	adc	r25, r25
    343e:	88 0f       	add	r24, r24
    3440:	99 1f       	adc	r25, r25
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	82 1b       	sub	r24, r18
    3448:	93 0b       	sbc	r25, r19
    344a:	80 54       	subi	r24, 0x40	; 64
    344c:	8a af       	std	Y+58, r24	; 0x3a
				}
				CH = MUART_voidRecieveByte();
    344e:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <MUART_voidRecieveByte>
    3452:	89 af       	std	Y+57, r24	; 0x39
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	a8 e4       	ldi	r26, 0x48	; 72
    345a:	b2 e4       	ldi	r27, 0x42	; 66
    345c:	8b 87       	std	Y+11, r24	; 0x0b
    345e:	9c 87       	std	Y+12, r25	; 0x0c
    3460:	ad 87       	std	Y+13, r26	; 0x0d
    3462:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3464:	6b 85       	ldd	r22, Y+11	; 0x0b
    3466:	7c 85       	ldd	r23, Y+12	; 0x0c
    3468:	8d 85       	ldd	r24, Y+13	; 0x0d
    346a:	9e 85       	ldd	r25, Y+14	; 0x0e
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	4a ef       	ldi	r20, 0xFA	; 250
    3472:	54 e4       	ldi	r21, 0x44	; 68
    3474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	8f 83       	std	Y+7, r24	; 0x07
    347e:	98 87       	std	Y+8, r25	; 0x08
    3480:	a9 87       	std	Y+9, r26	; 0x09
    3482:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3484:	6f 81       	ldd	r22, Y+7	; 0x07
    3486:	78 85       	ldd	r23, Y+8	; 0x08
    3488:	89 85       	ldd	r24, Y+9	; 0x09
    348a:	9a 85       	ldd	r25, Y+10	; 0x0a
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	40 e8       	ldi	r20, 0x80	; 128
    3492:	5f e3       	ldi	r21, 0x3F	; 63
    3494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3498:	88 23       	and	r24, r24
    349a:	2c f4       	brge	.+10     	; 0x34a6 <main+0x57a>
		__ticks = 1;
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	9e 83       	std	Y+6, r25	; 0x06
    34a2:	8d 83       	std	Y+5, r24	; 0x05
    34a4:	3f c0       	rjmp	.+126    	; 0x3524 <main+0x5f8>
	else if (__tmp > 65535)
    34a6:	6f 81       	ldd	r22, Y+7	; 0x07
    34a8:	78 85       	ldd	r23, Y+8	; 0x08
    34aa:	89 85       	ldd	r24, Y+9	; 0x09
    34ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	3f ef       	ldi	r19, 0xFF	; 255
    34b2:	4f e7       	ldi	r20, 0x7F	; 127
    34b4:	57 e4       	ldi	r21, 0x47	; 71
    34b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ba:	18 16       	cp	r1, r24
    34bc:	4c f5       	brge	.+82     	; 0x3510 <main+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34be:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	40 e2       	ldi	r20, 0x20	; 32
    34cc:	51 e4       	ldi	r21, 0x41	; 65
    34ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	bc 01       	movw	r22, r24
    34d8:	cd 01       	movw	r24, r26
    34da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	9e 83       	std	Y+6, r25	; 0x06
    34e4:	8d 83       	std	Y+5, r24	; 0x05
    34e6:	0f c0       	rjmp	.+30     	; 0x3506 <main+0x5da>
    34e8:	88 ec       	ldi	r24, 0xC8	; 200
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	9c 83       	std	Y+4, r25	; 0x04
    34ee:	8b 83       	std	Y+3, r24	; 0x03
    34f0:	8b 81       	ldd	r24, Y+3	; 0x03
    34f2:	9c 81       	ldd	r25, Y+4	; 0x04
    34f4:	01 97       	sbiw	r24, 0x01	; 1
    34f6:	f1 f7       	brne	.-4      	; 0x34f4 <main+0x5c8>
    34f8:	9c 83       	std	Y+4, r25	; 0x04
    34fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fc:	8d 81       	ldd	r24, Y+5	; 0x05
    34fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	9e 83       	std	Y+6, r25	; 0x06
    3504:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3506:	8d 81       	ldd	r24, Y+5	; 0x05
    3508:	9e 81       	ldd	r25, Y+6	; 0x06
    350a:	00 97       	sbiw	r24, 0x00	; 0
    350c:	69 f7       	brne	.-38     	; 0x34e8 <main+0x5bc>
    350e:	14 c0       	rjmp	.+40     	; 0x3538 <main+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3510:	6f 81       	ldd	r22, Y+7	; 0x07
    3512:	78 85       	ldd	r23, Y+8	; 0x08
    3514:	89 85       	ldd	r24, Y+9	; 0x09
    3516:	9a 85       	ldd	r25, Y+10	; 0x0a
    3518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	9e 83       	std	Y+6, r25	; 0x06
    3522:	8d 83       	std	Y+5, r24	; 0x05
    3524:	8d 81       	ldd	r24, Y+5	; 0x05
    3526:	9e 81       	ldd	r25, Y+6	; 0x06
    3528:	9a 83       	std	Y+2, r25	; 0x02
    352a:	89 83       	std	Y+1, r24	; 0x01
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	9a 81       	ldd	r25, Y+2	; 0x02
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	f1 f7       	brne	.-4      	; 0x3530 <main+0x604>
    3534:	9a 83       	std	Y+2, r25	; 0x02
    3536:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				MDIO_u8GetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_5 , &SWITCH);
    3538:	9e 01       	movw	r18, r28
    353a:	21 5c       	subi	r18, 0xC1	; 193
    353c:	3f 4f       	sbci	r19, 0xFF	; 255
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	65 e0       	ldi	r22, 0x05	; 5
    3542:	a9 01       	movw	r20, r18
    3544:	0e 94 34 10 	call	0x2068	; 0x2068 <MDIO_u8GetPinValue>
				if(SWITCH == MDIO_U8_HIGH)
    3548:	8f ad       	ldd	r24, Y+63	; 0x3f
    354a:	81 30       	cpi	r24, 0x01	; 1
    354c:	09 f0       	breq	.+2      	; 0x3550 <main+0x624>
    354e:	0d cf       	rjmp	.-486    	; 0x336a <main+0x43e>
					break;
			}
		}
		HLCD_U8ClearLCD();
    3550:	0e 94 18 0b 	call	0x1630	; 0x1630 <HLCD_U8ClearLCD>
    3554:	0e cd       	rjmp	.-1508   	; 0x2f72 <main+0x46>

00003556 <__udivmodhi4>:
    3556:	aa 1b       	sub	r26, r26
    3558:	bb 1b       	sub	r27, r27
    355a:	51 e1       	ldi	r21, 0x11	; 17
    355c:	07 c0       	rjmp	.+14     	; 0x356c <__udivmodhi4_ep>

0000355e <__udivmodhi4_loop>:
    355e:	aa 1f       	adc	r26, r26
    3560:	bb 1f       	adc	r27, r27
    3562:	a6 17       	cp	r26, r22
    3564:	b7 07       	cpc	r27, r23
    3566:	10 f0       	brcs	.+4      	; 0x356c <__udivmodhi4_ep>
    3568:	a6 1b       	sub	r26, r22
    356a:	b7 0b       	sbc	r27, r23

0000356c <__udivmodhi4_ep>:
    356c:	88 1f       	adc	r24, r24
    356e:	99 1f       	adc	r25, r25
    3570:	5a 95       	dec	r21
    3572:	a9 f7       	brne	.-22     	; 0x355e <__udivmodhi4_loop>
    3574:	80 95       	com	r24
    3576:	90 95       	com	r25
    3578:	bc 01       	movw	r22, r24
    357a:	cd 01       	movw	r24, r26
    357c:	08 95       	ret

0000357e <__divmodhi4>:
    357e:	97 fb       	bst	r25, 7
    3580:	09 2e       	mov	r0, r25
    3582:	07 26       	eor	r0, r23
    3584:	0a d0       	rcall	.+20     	; 0x359a <__divmodhi4_neg1>
    3586:	77 fd       	sbrc	r23, 7
    3588:	04 d0       	rcall	.+8      	; 0x3592 <__divmodhi4_neg2>
    358a:	e5 df       	rcall	.-54     	; 0x3556 <__udivmodhi4>
    358c:	06 d0       	rcall	.+12     	; 0x359a <__divmodhi4_neg1>
    358e:	00 20       	and	r0, r0
    3590:	1a f4       	brpl	.+6      	; 0x3598 <__divmodhi4_exit>

00003592 <__divmodhi4_neg2>:
    3592:	70 95       	com	r23
    3594:	61 95       	neg	r22
    3596:	7f 4f       	sbci	r23, 0xFF	; 255

00003598 <__divmodhi4_exit>:
    3598:	08 95       	ret

0000359a <__divmodhi4_neg1>:
    359a:	f6 f7       	brtc	.-4      	; 0x3598 <__divmodhi4_exit>
    359c:	90 95       	com	r25
    359e:	81 95       	neg	r24
    35a0:	9f 4f       	sbci	r25, 0xFF	; 255
    35a2:	08 95       	ret

000035a4 <__prologue_saves__>:
    35a4:	2f 92       	push	r2
    35a6:	3f 92       	push	r3
    35a8:	4f 92       	push	r4
    35aa:	5f 92       	push	r5
    35ac:	6f 92       	push	r6
    35ae:	7f 92       	push	r7
    35b0:	8f 92       	push	r8
    35b2:	9f 92       	push	r9
    35b4:	af 92       	push	r10
    35b6:	bf 92       	push	r11
    35b8:	cf 92       	push	r12
    35ba:	df 92       	push	r13
    35bc:	ef 92       	push	r14
    35be:	ff 92       	push	r15
    35c0:	0f 93       	push	r16
    35c2:	1f 93       	push	r17
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
    35cc:	ca 1b       	sub	r28, r26
    35ce:	db 0b       	sbc	r29, r27
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	09 94       	ijmp

000035dc <__epilogue_restores__>:
    35dc:	2a 88       	ldd	r2, Y+18	; 0x12
    35de:	39 88       	ldd	r3, Y+17	; 0x11
    35e0:	48 88       	ldd	r4, Y+16	; 0x10
    35e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    35e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    35e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    35e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    35ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    35ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    35ee:	b9 84       	ldd	r11, Y+9	; 0x09
    35f0:	c8 84       	ldd	r12, Y+8	; 0x08
    35f2:	df 80       	ldd	r13, Y+7	; 0x07
    35f4:	ee 80       	ldd	r14, Y+6	; 0x06
    35f6:	fd 80       	ldd	r15, Y+5	; 0x05
    35f8:	0c 81       	ldd	r16, Y+4	; 0x04
    35fa:	1b 81       	ldd	r17, Y+3	; 0x03
    35fc:	aa 81       	ldd	r26, Y+2	; 0x02
    35fe:	b9 81       	ldd	r27, Y+1	; 0x01
    3600:	ce 0f       	add	r28, r30
    3602:	d1 1d       	adc	r29, r1
    3604:	0f b6       	in	r0, 0x3f	; 63
    3606:	f8 94       	cli
    3608:	de bf       	out	0x3e, r29	; 62
    360a:	0f be       	out	0x3f, r0	; 63
    360c:	cd bf       	out	0x3d, r28	; 61
    360e:	ed 01       	movw	r28, r26
    3610:	08 95       	ret

00003612 <_exit>:
    3612:	f8 94       	cli

00003614 <__stop_program>:
    3614:	ff cf       	rjmp	.-2      	; 0x3614 <__stop_program>
